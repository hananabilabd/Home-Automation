
Atmega32_I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000089a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  00000948  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001fe  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107b  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078e  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa1  00000000  00000000  000030fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  00003d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094d  00000000  00000000  00004143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 4b 04 	jmp	0x896	; 0x896 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "I2C_Slave_H_File.h"					/* Include I2C slave header file */

#define Slave_Address			0x20

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	int8_t count = 0;
	
	LCD_Init();
  96:	0e 94 34 01 	call	0x268	; 0x268 <LCD_Init>
	I2C_Slave_Init(Slave_Address);
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Slave_Init>
	
	LCD_String_xy(1, 0, "Slave Device");
  a0:	40 e6       	ldi	r20, 0x60	; 96
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_String_xy>
#define Slave_Address			0x20

int main(void)
{
	char buffer[10];
	int8_t count = 0;
  ac:	d1 2c       	mov	r13, r1
					int8_t Ack_status;
					LCD_String_xy(2, 0, "Sending :       ");
					do
					{
						Ack_status = I2C_Slave_Transmit(count);	/* Send data byte */
						sprintf(buffer, "%d    ",count);
  ae:	0f 2e       	mov	r0, r31
  b0:	f0 e8       	ldi	r31, 0x80	; 128
  b2:	ef 2e       	mov	r14, r31
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ff 2e       	mov	r15, r31
  b8:	f0 2d       	mov	r31, r0
  ba:	8e 01       	movw	r16, r28
  bc:	0f 5f       	subi	r16, 0xFF	; 255
  be:	1f 4f       	sbci	r17, 0xFF	; 255
  c0:	b0 2e       	mov	r11, r16
  c2:	c1 2e       	mov	r12, r17
	
	LCD_String_xy(1, 0, "Slave Device");
    while(1)
    {
        //TODO:: Please write your application code 
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  c4:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Slave_Listen>
  c8:	88 23       	and	r24, r24
  ca:	19 f0       	breq	.+6      	; 0xd2 <main+0x50>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	d1 f7       	brne	.-12     	; 0xc4 <main+0x42>
  d0:	26 c0       	rjmp	.+76     	; 0x11e <main+0x9c>
		{
			case 0:
			{
				LCD_String_xy(2, 0, "Receiving :       ");
  d2:	4d e6       	ldi	r20, 0x6D	; 109
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_String_xy>
				do
				{
					sprintf(buffer, "%d    ", count);
  de:	2d 2d       	mov	r18, r13
  e0:	33 27       	eor	r19, r19
  e2:	27 fd       	sbrc	r18, 7
  e4:	30 95       	com	r19
  e6:	3f 93       	push	r19
  e8:	df 92       	push	r13
  ea:	ff 92       	push	r15
  ec:	ef 92       	push	r14
  ee:	1f 93       	push	r17
  f0:	0f 93       	push	r16
  f2:	0e 94 76 01 	call	0x2ec	; 0x2ec <sprintf>
					LCD_String_xy(2, 13, buffer);
  f6:	4b 2d       	mov	r20, r11
  f8:	5c 2d       	mov	r21, r12
  fa:	6d e0       	ldi	r22, 0x0D	; 13
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_String_xy>
					count = I2C_Slave_Receive();/* Receive data byte*/
 102:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Slave_Receive>
 106:	d8 2e       	mov	r13, r24
					} while (count != -1);			/* Receive until STOP/REPEATED START received */
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	d8 12       	cpse	r13, r24
 118:	e2 cf       	rjmp	.-60     	; 0xde <main+0x5c>
					count = 0;
 11a:	d1 2c       	mov	r13, r1
 11c:	d3 cf       	rjmp	.-90     	; 0xc4 <main+0x42>
					break;
				}
				case 1:
				{
					int8_t Ack_status;
					LCD_String_xy(2, 0, "Sending :       ");
 11e:	47 e8       	ldi	r20, 0x87	; 135
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_String_xy>
					do
					{
						Ack_status = I2C_Slave_Transmit(count);	/* Send data byte */
 12a:	8d 2d       	mov	r24, r13
 12c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <I2C_Slave_Transmit>
 130:	a8 2e       	mov	r10, r24
						sprintf(buffer, "%d    ",count);
 132:	2d 2d       	mov	r18, r13
 134:	33 27       	eor	r19, r19
 136:	27 fd       	sbrc	r18, 7
 138:	30 95       	com	r19
 13a:	3f 93       	push	r19
 13c:	df 92       	push	r13
 13e:	ff 92       	push	r15
 140:	ef 92       	push	r14
 142:	1f 93       	push	r17
 144:	0f 93       	push	r16
 146:	0e 94 76 01 	call	0x2ec	; 0x2ec <sprintf>
						LCD_String_xy(2, 13, buffer);
 14a:	4b 2d       	mov	r20, r11
 14c:	5c 2d       	mov	r21, r12
 14e:	6d e0       	ldi	r22, 0x0D	; 13
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_String_xy>
						count++;
 156:	d3 94       	inc	r13
						} while (Ack_status == 0);		/* Send until Acknowledgment is received */
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	aa 20       	and	r10, r10
 166:	09 f3       	breq	.-62     	; 0x12a <main+0xa8>
 168:	ad cf       	rjmp	.-166    	; 0xc4 <main+0x42>

0000016a <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
 16a:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
 16c:	84 ec       	ldi	r24, 0xC4	; 196
 16e:	86 bf       	out	0x36, r24	; 54
 170:	08 95       	ret

00000172 <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 172:	06 b6       	in	r0, 0x36	; 54
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <I2C_Slave_Listen>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 178:	81 b1       	in	r24, 0x01	; 1
 17a:	88 7f       	andi	r24, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 17c:	80 36       	cpi	r24, 0x60	; 96
 17e:	61 f0       	breq	.+24     	; 0x198 <I2C_Slave_Listen+0x26>
 180:	88 36       	cpi	r24, 0x68	; 104
 182:	61 f0       	breq	.+24     	; 0x19c <I2C_Slave_Listen+0x2a>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 184:	88 3a       	cpi	r24, 0xA8	; 168
 186:	61 f0       	breq	.+24     	; 0x1a0 <I2C_Slave_Listen+0x2e>
 188:	80 3b       	cpi	r24, 0xB0	; 176
 18a:	61 f0       	breq	.+24     	; 0x1a4 <I2C_Slave_Listen+0x32>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 18c:	80 37       	cpi	r24, 0x70	; 112
 18e:	61 f0       	breq	.+24     	; 0x1a8 <I2C_Slave_Listen+0x36>
 190:	88 37       	cpi	r24, 0x78	; 120
 192:	79 f7       	brne	.-34     	; 0x172 <I2C_Slave_Listen>
		return 2;								/* If yes then return 2 to indicate ack returned */
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
 1a8:	82 e0       	ldi	r24, 0x02	; 2
		else
		continue;								/* Else continue */
	}
}
 1aa:	08 95       	ret

000001ac <I2C_Slave_Transmit>:

int8_t I2C_Slave_Transmit(char data)
{
	uint8_t status;
	TWDR = data;								/* Write data to TWDR to be transmitted */
 1ac:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
 1ae:	84 ec       	ldi	r24, 0xC4	; 196
 1b0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
 1b2:	06 b6       	in	r0, 0x36	; 54
 1b4:	07 fe       	sbrs	r0, 7
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <I2C_Slave_Transmit+0x6>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 1b8:	81 b1       	in	r24, 0x01	; 1
 1ba:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 1bc:	80 3a       	cpi	r24, 0xA0	; 160
 1be:	29 f4       	brne	.+10     	; 0x1ca <I2C_Slave_Transmit+0x1e>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
 1c0:	86 b7       	in	r24, 0x36	; 54
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	86 bf       	out	0x36, r24	; 54
		return -1;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	08 95       	ret
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
 1ca:	88 3b       	cpi	r24, 0xB8	; 184
 1cc:	59 f0       	breq	.+22     	; 0x1e4 <I2C_Slave_Transmit+0x38>
	return 0;									/* If yes then return 0 */
	if (status == 0xC0)							/* Check weather data transmitted & nack received */
 1ce:	80 3c       	cpi	r24, 0xC0	; 192
 1d0:	29 f4       	brne	.+10     	; 0x1dc <I2C_Slave_Transmit+0x30>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
 1d2:	86 b7       	in	r24, 0x36	; 54
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	86 bf       	out	0x36, r24	; 54
		return -2;
 1d8:	8e ef       	ldi	r24, 0xFE	; 254
 1da:	08 95       	ret
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
 1dc:	88 3c       	cpi	r24, 0xC8	; 200
 1de:	21 f4       	brne	.+8      	; 0x1e8 <I2C_Slave_Transmit+0x3c>
	return -3;									/* If yes then return -3 */
 1e0:	8d ef       	ldi	r24, 0xFD	; 253
 1e2:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
		return -1;
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
	return 0;									/* If yes then return 0 */
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
		return -2;
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
	return -3;									/* If yes then return -3 */
	else										/* else return -4 */
	return -4;
 1e8:	8c ef       	ldi	r24, 0xFC	; 252
}
 1ea:	08 95       	ret

000001ec <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
 1ec:	84 ec       	ldi	r24, 0xC4	; 196
 1ee:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
 1f0:	06 b6       	in	r0, 0x36	; 54
 1f2:	07 fe       	sbrs	r0, 7
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <I2C_Slave_Receive+0x4>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 1f6:	81 b1       	in	r24, 0x01	; 1
 1f8:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
 1fa:	80 38       	cpi	r24, 0x80	; 128
 1fc:	11 f0       	breq	.+4      	; 0x202 <I2C_Slave_Receive+0x16>
 1fe:	80 39       	cpi	r24, 0x90	; 144
 200:	11 f4       	brne	.+4      	; 0x206 <I2C_Slave_Receive+0x1a>
	return TWDR;								/* If yes then return received data */
 202:	83 b1       	in	r24, 0x03	; 3
 204:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
 206:	88 38       	cpi	r24, 0x88	; 136
 208:	11 f0       	breq	.+4      	; 0x20e <I2C_Slave_Receive+0x22>
 20a:	88 39       	cpi	r24, 0x98	; 152
 20c:	11 f4       	brne	.+4      	; 0x212 <I2C_Slave_Receive+0x26>
	return TWDR;								/* If yes then return received data */
 20e:	83 b1       	in	r24, 0x03	; 3
 210:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 212:	80 3a       	cpi	r24, 0xA0	; 160
 214:	29 f4       	brne	.+10     	; 0x220 <I2C_Slave_Receive+0x34>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
 216:	86 b7       	in	r24, 0x36	; 54
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	86 bf       	out	0x36, r24	; 54
		return -1;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 220:	8e ef       	ldi	r24, 0xFE	; 254
}
 222:	08 95       	ret

00000224 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
 224:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
 226:	85 b3       	in	r24, 0x15	; 21
 228:	87 7e       	andi	r24, 0xE7	; 231
 22a:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 22c:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_Command+0xc>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 236:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	8f e6       	ldi	r24, 0x6F	; 111
 23a:	97 e1       	ldi	r25, 0x17	; 23
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_Command+0x18>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_Command+0x1e>
 242:	00 00       	nop
 244:	08 95       	ret

00000246 <LCD_Char>:
	_delay_ms(3);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 246:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 248:	ab 98       	cbi	0x15, 3	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 24a:	85 b3       	in	r24, 0x15	; 21
 24c:	84 61       	ori	r24, 0x14	; 20
 24e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <LCD_Char+0xc>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 258:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	8f ec       	ldi	r24, 0xCF	; 207
 25c:	97 e0       	ldi	r25, 0x07	; 7
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_Char+0x18>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_Char+0x1e>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <LCD_Init>:
	_delay_ms(1);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 268:	84 b3       	in	r24, 0x14	; 20
 26a:	8c 61       	ori	r24, 0x1C	; 28
 26c:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	87 bb       	out	0x17, r24	; 23
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9c e9       	ldi	r25, 0x9C	; 156
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_Init+0xe>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Init+0x14>
 27c:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 284:	8c e0       	ldi	r24, 0x0C	; 12
 286:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Command>
 29c:	08 95       	ret

0000029e <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 2a4:	88 81       	ld	r24, Y
 2a6:	88 23       	and	r24, r24
 2a8:	31 f0       	breq	.+12     	; 0x2b6 <LCD_String+0x18>
	LCD_Command (0x06);								/* Auto Increment cursor */
	LCD_Command (0x01);								/* Clear LCD command */
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
}

void LCD_String (char *str)							/* Send string to LCD function */
 2aa:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 2ac:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 2b0:	89 91       	ld	r24, Y+
 2b2:	81 11       	cpse	r24, r1
 2b4:	fb cf       	rjmp	.-10     	; 0x2ac <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	ea 01       	movw	r28, r20
	if (row == 1)
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	31 f4       	brne	.+12     	; 0x2d2 <LCD_String_xy+0x16>
	LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 2c6:	86 2f       	mov	r24, r22
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Command>
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <LCD_String_xy+0x24>
	else if (row == 2)
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	29 f4       	brne	.+10     	; 0x2e0 <LCD_String_xy+0x24>
	LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 2d6:	86 2f       	mov	r24, r22
 2d8:	8f 70       	andi	r24, 0x0F	; 15
 2da:	80 6c       	ori	r24, 0xC0	; 192
 2dc:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
 2e0:	ce 01       	movw	r24, r28
 2e2:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_String>
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <sprintf>:
 2ec:	ae e0       	ldi	r26, 0x0E	; 14
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	ec e7       	ldi	r30, 0x7C	; 124
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	0c 94 22 04 	jmp	0x844	; 0x844 <__prologue_saves__+0x1c>
 2f8:	0d 89       	ldd	r16, Y+21	; 0x15
 2fa:	1e 89       	ldd	r17, Y+22	; 0x16
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	8c 83       	std	Y+4, r24	; 0x04
 300:	1a 83       	std	Y+2, r17	; 0x02
 302:	09 83       	std	Y+1, r16	; 0x01
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	9f e7       	ldi	r25, 0x7F	; 127
 308:	9e 83       	std	Y+6, r25	; 0x06
 30a:	8d 83       	std	Y+5, r24	; 0x05
 30c:	ce 01       	movw	r24, r28
 30e:	49 96       	adiw	r24, 0x19	; 25
 310:	ac 01       	movw	r20, r24
 312:	6f 89       	ldd	r22, Y+23	; 0x17
 314:	78 8d       	ldd	r23, Y+24	; 0x18
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 98 01 	call	0x330	; 0x330 <vfprintf>
 31e:	ef 81       	ldd	r30, Y+7	; 0x07
 320:	f8 85       	ldd	r31, Y+8	; 0x08
 322:	e0 0f       	add	r30, r16
 324:	f1 1f       	adc	r31, r17
 326:	10 82       	st	Z, r1
 328:	2e 96       	adiw	r28, 0x0e	; 14
 32a:	e4 e0       	ldi	r30, 0x04	; 4
 32c:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__epilogue_restores__+0x1c>

00000330 <vfprintf>:
 330:	ac e0       	ldi	r26, 0x0C	; 12
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	ee e9       	ldi	r30, 0x9E	; 158
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	0c 94 14 04 	jmp	0x828	; 0x828 <__prologue_saves__>
 33c:	7c 01       	movw	r14, r24
 33e:	6b 01       	movw	r12, r22
 340:	8a 01       	movw	r16, r20
 342:	fc 01       	movw	r30, r24
 344:	17 82       	std	Z+7, r1	; 0x07
 346:	16 82       	std	Z+6, r1	; 0x06
 348:	83 81       	ldd	r24, Z+3	; 0x03
 34a:	81 ff       	sbrs	r24, 1
 34c:	c6 c1       	rjmp	.+908    	; 0x6da <vfprintf+0x3aa>
 34e:	88 24       	eor	r8, r8
 350:	83 94       	inc	r8
 352:	91 2c       	mov	r9, r1
 354:	8c 0e       	add	r8, r28
 356:	9d 1e       	adc	r9, r29
 358:	f7 01       	movw	r30, r14
 35a:	93 81       	ldd	r25, Z+3	; 0x03
 35c:	f6 01       	movw	r30, r12
 35e:	93 fd       	sbrc	r25, 3
 360:	85 91       	lpm	r24, Z+
 362:	93 ff       	sbrs	r25, 3
 364:	81 91       	ld	r24, Z+
 366:	6f 01       	movw	r12, r30
 368:	88 23       	and	r24, r24
 36a:	09 f4       	brne	.+2      	; 0x36e <vfprintf+0x3e>
 36c:	b2 c1       	rjmp	.+868    	; 0x6d2 <vfprintf+0x3a2>
 36e:	85 32       	cpi	r24, 0x25	; 37
 370:	39 f4       	brne	.+14     	; 0x380 <vfprintf+0x50>
 372:	93 fd       	sbrc	r25, 3
 374:	85 91       	lpm	r24, Z+
 376:	93 ff       	sbrs	r25, 3
 378:	81 91       	ld	r24, Z+
 37a:	6f 01       	movw	r12, r30
 37c:	85 32       	cpi	r24, 0x25	; 37
 37e:	29 f4       	brne	.+10     	; 0x38a <vfprintf+0x5a>
 380:	b7 01       	movw	r22, r14
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 388:	e7 cf       	rjmp	.-50     	; 0x358 <vfprintf+0x28>
 38a:	51 2c       	mov	r5, r1
 38c:	31 2c       	mov	r3, r1
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	20 32       	cpi	r18, 0x20	; 32
 392:	a8 f4       	brcc	.+42     	; 0x3be <vfprintf+0x8e>
 394:	8b 32       	cpi	r24, 0x2B	; 43
 396:	61 f0       	breq	.+24     	; 0x3b0 <vfprintf+0x80>
 398:	28 f4       	brcc	.+10     	; 0x3a4 <vfprintf+0x74>
 39a:	80 32       	cpi	r24, 0x20	; 32
 39c:	51 f0       	breq	.+20     	; 0x3b2 <vfprintf+0x82>
 39e:	83 32       	cpi	r24, 0x23	; 35
 3a0:	71 f4       	brne	.+28     	; 0x3be <vfprintf+0x8e>
 3a2:	0b c0       	rjmp	.+22     	; 0x3ba <vfprintf+0x8a>
 3a4:	8d 32       	cpi	r24, 0x2D	; 45
 3a6:	39 f0       	breq	.+14     	; 0x3b6 <vfprintf+0x86>
 3a8:	80 33       	cpi	r24, 0x30	; 48
 3aa:	49 f4       	brne	.+18     	; 0x3be <vfprintf+0x8e>
 3ac:	21 60       	ori	r18, 0x01	; 1
 3ae:	28 c0       	rjmp	.+80     	; 0x400 <vfprintf+0xd0>
 3b0:	22 60       	ori	r18, 0x02	; 2
 3b2:	24 60       	ori	r18, 0x04	; 4
 3b4:	25 c0       	rjmp	.+74     	; 0x400 <vfprintf+0xd0>
 3b6:	28 60       	ori	r18, 0x08	; 8
 3b8:	23 c0       	rjmp	.+70     	; 0x400 <vfprintf+0xd0>
 3ba:	20 61       	ori	r18, 0x10	; 16
 3bc:	21 c0       	rjmp	.+66     	; 0x400 <vfprintf+0xd0>
 3be:	27 fd       	sbrc	r18, 7
 3c0:	27 c0       	rjmp	.+78     	; 0x410 <vfprintf+0xe0>
 3c2:	38 2f       	mov	r19, r24
 3c4:	30 53       	subi	r19, 0x30	; 48
 3c6:	3a 30       	cpi	r19, 0x0A	; 10
 3c8:	78 f4       	brcc	.+30     	; 0x3e8 <vfprintf+0xb8>
 3ca:	26 ff       	sbrs	r18, 6
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <vfprintf+0xaa>
 3ce:	fa e0       	ldi	r31, 0x0A	; 10
 3d0:	5f 9e       	mul	r5, r31
 3d2:	30 0d       	add	r19, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	53 2e       	mov	r5, r19
 3d8:	13 c0       	rjmp	.+38     	; 0x400 <vfprintf+0xd0>
 3da:	8a e0       	ldi	r24, 0x0A	; 10
 3dc:	38 9e       	mul	r3, r24
 3de:	30 0d       	add	r19, r0
 3e0:	11 24       	eor	r1, r1
 3e2:	33 2e       	mov	r3, r19
 3e4:	20 62       	ori	r18, 0x20	; 32
 3e6:	0c c0       	rjmp	.+24     	; 0x400 <vfprintf+0xd0>
 3e8:	8e 32       	cpi	r24, 0x2E	; 46
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <vfprintf+0xc4>
 3ec:	26 fd       	sbrc	r18, 6
 3ee:	71 c1       	rjmp	.+738    	; 0x6d2 <vfprintf+0x3a2>
 3f0:	20 64       	ori	r18, 0x40	; 64
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <vfprintf+0xd0>
 3f4:	8c 36       	cpi	r24, 0x6C	; 108
 3f6:	11 f4       	brne	.+4      	; 0x3fc <vfprintf+0xcc>
 3f8:	20 68       	ori	r18, 0x80	; 128
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <vfprintf+0xd0>
 3fc:	88 36       	cpi	r24, 0x68	; 104
 3fe:	41 f4       	brne	.+16     	; 0x410 <vfprintf+0xe0>
 400:	f6 01       	movw	r30, r12
 402:	93 fd       	sbrc	r25, 3
 404:	85 91       	lpm	r24, Z+
 406:	93 ff       	sbrs	r25, 3
 408:	81 91       	ld	r24, Z+
 40a:	6f 01       	movw	r12, r30
 40c:	81 11       	cpse	r24, r1
 40e:	c0 cf       	rjmp	.-128    	; 0x390 <vfprintf+0x60>
 410:	98 2f       	mov	r25, r24
 412:	95 54       	subi	r25, 0x45	; 69
 414:	93 30       	cpi	r25, 0x03	; 3
 416:	18 f0       	brcs	.+6      	; 0x41e <vfprintf+0xee>
 418:	90 52       	subi	r25, 0x20	; 32
 41a:	93 30       	cpi	r25, 0x03	; 3
 41c:	28 f4       	brcc	.+10     	; 0x428 <vfprintf+0xf8>
 41e:	0c 5f       	subi	r16, 0xFC	; 252
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	ff e3       	ldi	r31, 0x3F	; 63
 424:	f9 83       	std	Y+1, r31	; 0x01
 426:	0d c0       	rjmp	.+26     	; 0x442 <vfprintf+0x112>
 428:	83 36       	cpi	r24, 0x63	; 99
 42a:	31 f0       	breq	.+12     	; 0x438 <vfprintf+0x108>
 42c:	83 37       	cpi	r24, 0x73	; 115
 42e:	71 f0       	breq	.+28     	; 0x44c <vfprintf+0x11c>
 430:	83 35       	cpi	r24, 0x53	; 83
 432:	09 f0       	breq	.+2      	; 0x436 <vfprintf+0x106>
 434:	5e c0       	rjmp	.+188    	; 0x4f2 <vfprintf+0x1c2>
 436:	23 c0       	rjmp	.+70     	; 0x47e <vfprintf+0x14e>
 438:	f8 01       	movw	r30, r16
 43a:	80 81       	ld	r24, Z
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	0e 5f       	subi	r16, 0xFE	; 254
 440:	1f 4f       	sbci	r17, 0xFF	; 255
 442:	44 24       	eor	r4, r4
 444:	43 94       	inc	r4
 446:	51 2c       	mov	r5, r1
 448:	54 01       	movw	r10, r8
 44a:	15 c0       	rjmp	.+42     	; 0x476 <vfprintf+0x146>
 44c:	38 01       	movw	r6, r16
 44e:	f2 e0       	ldi	r31, 0x02	; 2
 450:	6f 0e       	add	r6, r31
 452:	71 1c       	adc	r7, r1
 454:	f8 01       	movw	r30, r16
 456:	a0 80       	ld	r10, Z
 458:	b1 80       	ldd	r11, Z+1	; 0x01
 45a:	26 ff       	sbrs	r18, 6
 45c:	03 c0       	rjmp	.+6      	; 0x464 <vfprintf+0x134>
 45e:	65 2d       	mov	r22, r5
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <vfprintf+0x138>
 464:	6f ef       	ldi	r22, 0xFF	; 255
 466:	7f ef       	ldi	r23, 0xFF	; 255
 468:	c5 01       	movw	r24, r10
 46a:	2c 87       	std	Y+12, r18	; 0x0c
 46c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <strnlen>
 470:	2c 01       	movw	r4, r24
 472:	83 01       	movw	r16, r6
 474:	2c 85       	ldd	r18, Y+12	; 0x0c
 476:	6f e7       	ldi	r22, 0x7F	; 127
 478:	26 2e       	mov	r2, r22
 47a:	22 22       	and	r2, r18
 47c:	18 c0       	rjmp	.+48     	; 0x4ae <vfprintf+0x17e>
 47e:	38 01       	movw	r6, r16
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	6f 0e       	add	r6, r31
 484:	71 1c       	adc	r7, r1
 486:	f8 01       	movw	r30, r16
 488:	a0 80       	ld	r10, Z
 48a:	b1 80       	ldd	r11, Z+1	; 0x01
 48c:	26 ff       	sbrs	r18, 6
 48e:	03 c0       	rjmp	.+6      	; 0x496 <vfprintf+0x166>
 490:	65 2d       	mov	r22, r5
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <vfprintf+0x16a>
 496:	6f ef       	ldi	r22, 0xFF	; 255
 498:	7f ef       	ldi	r23, 0xFF	; 255
 49a:	c5 01       	movw	r24, r10
 49c:	2c 87       	std	Y+12, r18	; 0x0c
 49e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <strnlen_P>
 4a2:	2c 01       	movw	r4, r24
 4a4:	2c 85       	ldd	r18, Y+12	; 0x0c
 4a6:	50 e8       	ldi	r21, 0x80	; 128
 4a8:	25 2e       	mov	r2, r21
 4aa:	22 2a       	or	r2, r18
 4ac:	83 01       	movw	r16, r6
 4ae:	23 fc       	sbrc	r2, 3
 4b0:	1c c0       	rjmp	.+56     	; 0x4ea <vfprintf+0x1ba>
 4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <vfprintf+0x190>
 4b4:	b7 01       	movw	r22, r14
 4b6:	80 e2       	ldi	r24, 0x20	; 32
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 4be:	3a 94       	dec	r3
 4c0:	83 2d       	mov	r24, r3
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	48 16       	cp	r4, r24
 4c6:	59 06       	cpc	r5, r25
 4c8:	a8 f3       	brcs	.-22     	; 0x4b4 <vfprintf+0x184>
 4ca:	0f c0       	rjmp	.+30     	; 0x4ea <vfprintf+0x1ba>
 4cc:	f5 01       	movw	r30, r10
 4ce:	27 fc       	sbrc	r2, 7
 4d0:	85 91       	lpm	r24, Z+
 4d2:	27 fe       	sbrs	r2, 7
 4d4:	81 91       	ld	r24, Z+
 4d6:	5f 01       	movw	r10, r30
 4d8:	b7 01       	movw	r22, r14
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 4e0:	31 10       	cpse	r3, r1
 4e2:	3a 94       	dec	r3
 4e4:	f1 e0       	ldi	r31, 0x01	; 1
 4e6:	4f 1a       	sub	r4, r31
 4e8:	51 08       	sbc	r5, r1
 4ea:	41 14       	cp	r4, r1
 4ec:	51 04       	cpc	r5, r1
 4ee:	71 f7       	brne	.-36     	; 0x4cc <vfprintf+0x19c>
 4f0:	ed c0       	rjmp	.+474    	; 0x6cc <vfprintf+0x39c>
 4f2:	84 36       	cpi	r24, 0x64	; 100
 4f4:	11 f0       	breq	.+4      	; 0x4fa <vfprintf+0x1ca>
 4f6:	89 36       	cpi	r24, 0x69	; 105
 4f8:	41 f5       	brne	.+80     	; 0x54a <vfprintf+0x21a>
 4fa:	f8 01       	movw	r30, r16
 4fc:	27 ff       	sbrs	r18, 7
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <vfprintf+0x1de>
 500:	60 81       	ld	r22, Z
 502:	71 81       	ldd	r23, Z+1	; 0x01
 504:	82 81       	ldd	r24, Z+2	; 0x02
 506:	93 81       	ldd	r25, Z+3	; 0x03
 508:	0c 5f       	subi	r16, 0xFC	; 252
 50a:	1f 4f       	sbci	r17, 0xFF	; 255
 50c:	08 c0       	rjmp	.+16     	; 0x51e <vfprintf+0x1ee>
 50e:	60 81       	ld	r22, Z
 510:	71 81       	ldd	r23, Z+1	; 0x01
 512:	88 27       	eor	r24, r24
 514:	77 fd       	sbrc	r23, 7
 516:	80 95       	com	r24
 518:	98 2f       	mov	r25, r24
 51a:	0e 5f       	subi	r16, 0xFE	; 254
 51c:	1f 4f       	sbci	r17, 0xFF	; 255
 51e:	4f e6       	ldi	r20, 0x6F	; 111
 520:	b4 2e       	mov	r11, r20
 522:	b2 22       	and	r11, r18
 524:	97 ff       	sbrs	r25, 7
 526:	09 c0       	rjmp	.+18     	; 0x53a <vfprintf+0x20a>
 528:	90 95       	com	r25
 52a:	80 95       	com	r24
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	f0 e8       	ldi	r31, 0x80	; 128
 538:	bf 2a       	or	r11, r31
 53a:	2a e0       	ldi	r18, 0x0A	; 10
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	a4 01       	movw	r20, r8
 540:	0e 94 b6 03 	call	0x76c	; 0x76c <__ultoa_invert>
 544:	a8 2e       	mov	r10, r24
 546:	a8 18       	sub	r10, r8
 548:	43 c0       	rjmp	.+134    	; 0x5d0 <vfprintf+0x2a0>
 54a:	85 37       	cpi	r24, 0x75	; 117
 54c:	31 f4       	brne	.+12     	; 0x55a <vfprintf+0x22a>
 54e:	3f ee       	ldi	r19, 0xEF	; 239
 550:	b3 2e       	mov	r11, r19
 552:	b2 22       	and	r11, r18
 554:	2a e0       	ldi	r18, 0x0A	; 10
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	24 c0       	rjmp	.+72     	; 0x5a2 <vfprintf+0x272>
 55a:	99 ef       	ldi	r25, 0xF9	; 249
 55c:	b9 2e       	mov	r11, r25
 55e:	b2 22       	and	r11, r18
 560:	8f 36       	cpi	r24, 0x6F	; 111
 562:	b9 f0       	breq	.+46     	; 0x592 <vfprintf+0x262>
 564:	20 f4       	brcc	.+8      	; 0x56e <vfprintf+0x23e>
 566:	88 35       	cpi	r24, 0x58	; 88
 568:	09 f0       	breq	.+2      	; 0x56c <vfprintf+0x23c>
 56a:	b3 c0       	rjmp	.+358    	; 0x6d2 <vfprintf+0x3a2>
 56c:	0d c0       	rjmp	.+26     	; 0x588 <vfprintf+0x258>
 56e:	80 37       	cpi	r24, 0x70	; 112
 570:	21 f0       	breq	.+8      	; 0x57a <vfprintf+0x24a>
 572:	88 37       	cpi	r24, 0x78	; 120
 574:	09 f0       	breq	.+2      	; 0x578 <vfprintf+0x248>
 576:	ad c0       	rjmp	.+346    	; 0x6d2 <vfprintf+0x3a2>
 578:	02 c0       	rjmp	.+4      	; 0x57e <vfprintf+0x24e>
 57a:	20 e1       	ldi	r18, 0x10	; 16
 57c:	b2 2a       	or	r11, r18
 57e:	b4 fe       	sbrs	r11, 4
 580:	0b c0       	rjmp	.+22     	; 0x598 <vfprintf+0x268>
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	b8 2a       	or	r11, r24
 586:	08 c0       	rjmp	.+16     	; 0x598 <vfprintf+0x268>
 588:	24 ff       	sbrs	r18, 4
 58a:	09 c0       	rjmp	.+18     	; 0x59e <vfprintf+0x26e>
 58c:	e6 e0       	ldi	r30, 0x06	; 6
 58e:	be 2a       	or	r11, r30
 590:	06 c0       	rjmp	.+12     	; 0x59e <vfprintf+0x26e>
 592:	28 e0       	ldi	r18, 0x08	; 8
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <vfprintf+0x272>
 598:	20 e1       	ldi	r18, 0x10	; 16
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <vfprintf+0x272>
 59e:	20 e1       	ldi	r18, 0x10	; 16
 5a0:	32 e0       	ldi	r19, 0x02	; 2
 5a2:	f8 01       	movw	r30, r16
 5a4:	b7 fe       	sbrs	r11, 7
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <vfprintf+0x286>
 5a8:	60 81       	ld	r22, Z
 5aa:	71 81       	ldd	r23, Z+1	; 0x01
 5ac:	82 81       	ldd	r24, Z+2	; 0x02
 5ae:	93 81       	ldd	r25, Z+3	; 0x03
 5b0:	0c 5f       	subi	r16, 0xFC	; 252
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <vfprintf+0x292>
 5b6:	60 81       	ld	r22, Z
 5b8:	71 81       	ldd	r23, Z+1	; 0x01
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 5f       	subi	r16, 0xFE	; 254
 5c0:	1f 4f       	sbci	r17, 0xFF	; 255
 5c2:	a4 01       	movw	r20, r8
 5c4:	0e 94 b6 03 	call	0x76c	; 0x76c <__ultoa_invert>
 5c8:	a8 2e       	mov	r10, r24
 5ca:	a8 18       	sub	r10, r8
 5cc:	ff e7       	ldi	r31, 0x7F	; 127
 5ce:	bf 22       	and	r11, r31
 5d0:	b6 fe       	sbrs	r11, 6
 5d2:	0b c0       	rjmp	.+22     	; 0x5ea <vfprintf+0x2ba>
 5d4:	2b 2d       	mov	r18, r11
 5d6:	2e 7f       	andi	r18, 0xFE	; 254
 5d8:	a5 14       	cp	r10, r5
 5da:	50 f4       	brcc	.+20     	; 0x5f0 <vfprintf+0x2c0>
 5dc:	b4 fe       	sbrs	r11, 4
 5de:	0a c0       	rjmp	.+20     	; 0x5f4 <vfprintf+0x2c4>
 5e0:	b2 fc       	sbrc	r11, 2
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <vfprintf+0x2c4>
 5e4:	2b 2d       	mov	r18, r11
 5e6:	2e 7e       	andi	r18, 0xEE	; 238
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <vfprintf+0x2c4>
 5ea:	7a 2c       	mov	r7, r10
 5ec:	2b 2d       	mov	r18, r11
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <vfprintf+0x2c6>
 5f0:	7a 2c       	mov	r7, r10
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <vfprintf+0x2c6>
 5f4:	75 2c       	mov	r7, r5
 5f6:	24 ff       	sbrs	r18, 4
 5f8:	0d c0       	rjmp	.+26     	; 0x614 <vfprintf+0x2e4>
 5fa:	fe 01       	movw	r30, r28
 5fc:	ea 0d       	add	r30, r10
 5fe:	f1 1d       	adc	r31, r1
 600:	80 81       	ld	r24, Z
 602:	80 33       	cpi	r24, 0x30	; 48
 604:	11 f4       	brne	.+4      	; 0x60a <vfprintf+0x2da>
 606:	29 7e       	andi	r18, 0xE9	; 233
 608:	09 c0       	rjmp	.+18     	; 0x61c <vfprintf+0x2ec>
 60a:	22 ff       	sbrs	r18, 2
 60c:	06 c0       	rjmp	.+12     	; 0x61a <vfprintf+0x2ea>
 60e:	73 94       	inc	r7
 610:	73 94       	inc	r7
 612:	04 c0       	rjmp	.+8      	; 0x61c <vfprintf+0x2ec>
 614:	82 2f       	mov	r24, r18
 616:	86 78       	andi	r24, 0x86	; 134
 618:	09 f0       	breq	.+2      	; 0x61c <vfprintf+0x2ec>
 61a:	73 94       	inc	r7
 61c:	23 fd       	sbrc	r18, 3
 61e:	14 c0       	rjmp	.+40     	; 0x648 <vfprintf+0x318>
 620:	20 ff       	sbrs	r18, 0
 622:	0f c0       	rjmp	.+30     	; 0x642 <vfprintf+0x312>
 624:	5a 2c       	mov	r5, r10
 626:	73 14       	cp	r7, r3
 628:	60 f4       	brcc	.+24     	; 0x642 <vfprintf+0x312>
 62a:	53 0c       	add	r5, r3
 62c:	57 18       	sub	r5, r7
 62e:	73 2c       	mov	r7, r3
 630:	08 c0       	rjmp	.+16     	; 0x642 <vfprintf+0x312>
 632:	b7 01       	movw	r22, r14
 634:	80 e2       	ldi	r24, 0x20	; 32
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	2c 87       	std	Y+12, r18	; 0x0c
 63a:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 63e:	73 94       	inc	r7
 640:	2c 85       	ldd	r18, Y+12	; 0x0c
 642:	73 14       	cp	r7, r3
 644:	b0 f3       	brcs	.-20     	; 0x632 <vfprintf+0x302>
 646:	04 c0       	rjmp	.+8      	; 0x650 <vfprintf+0x320>
 648:	73 14       	cp	r7, r3
 64a:	10 f4       	brcc	.+4      	; 0x650 <vfprintf+0x320>
 64c:	37 18       	sub	r3, r7
 64e:	01 c0       	rjmp	.+2      	; 0x652 <vfprintf+0x322>
 650:	31 2c       	mov	r3, r1
 652:	24 ff       	sbrs	r18, 4
 654:	12 c0       	rjmp	.+36     	; 0x67a <vfprintf+0x34a>
 656:	b7 01       	movw	r22, r14
 658:	80 e3       	ldi	r24, 0x30	; 48
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	2c 87       	std	Y+12, r18	; 0x0c
 65e:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 662:	2c 85       	ldd	r18, Y+12	; 0x0c
 664:	22 ff       	sbrs	r18, 2
 666:	1e c0       	rjmp	.+60     	; 0x6a4 <vfprintf+0x374>
 668:	21 ff       	sbrs	r18, 1
 66a:	03 c0       	rjmp	.+6      	; 0x672 <vfprintf+0x342>
 66c:	88 e5       	ldi	r24, 0x58	; 88
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <vfprintf+0x346>
 672:	88 e7       	ldi	r24, 0x78	; 120
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	b7 01       	movw	r22, r14
 678:	0c c0       	rjmp	.+24     	; 0x692 <vfprintf+0x362>
 67a:	82 2f       	mov	r24, r18
 67c:	86 78       	andi	r24, 0x86	; 134
 67e:	91 f0       	breq	.+36     	; 0x6a4 <vfprintf+0x374>
 680:	21 fd       	sbrc	r18, 1
 682:	02 c0       	rjmp	.+4      	; 0x688 <vfprintf+0x358>
 684:	80 e2       	ldi	r24, 0x20	; 32
 686:	01 c0       	rjmp	.+2      	; 0x68a <vfprintf+0x35a>
 688:	8b e2       	ldi	r24, 0x2B	; 43
 68a:	27 fd       	sbrc	r18, 7
 68c:	8d e2       	ldi	r24, 0x2D	; 45
 68e:	b7 01       	movw	r22, r14
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <vfprintf+0x374>
 698:	b7 01       	movw	r22, r14
 69a:	80 e3       	ldi	r24, 0x30	; 48
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 6a2:	5a 94       	dec	r5
 6a4:	a5 14       	cp	r10, r5
 6a6:	c0 f3       	brcs	.-16     	; 0x698 <vfprintf+0x368>
 6a8:	aa 94       	dec	r10
 6aa:	f4 01       	movw	r30, r8
 6ac:	ea 0d       	add	r30, r10
 6ae:	f1 1d       	adc	r31, r1
 6b0:	b7 01       	movw	r22, r14
 6b2:	80 81       	ld	r24, Z
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 6ba:	a1 10       	cpse	r10, r1
 6bc:	f5 cf       	rjmp	.-22     	; 0x6a8 <vfprintf+0x378>
 6be:	06 c0       	rjmp	.+12     	; 0x6cc <vfprintf+0x39c>
 6c0:	b7 01       	movw	r22, r14
 6c2:	80 e2       	ldi	r24, 0x20	; 32
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 8a 03 	call	0x714	; 0x714 <fputc>
 6ca:	3a 94       	dec	r3
 6cc:	31 10       	cpse	r3, r1
 6ce:	f8 cf       	rjmp	.-16     	; 0x6c0 <vfprintf+0x390>
 6d0:	43 ce       	rjmp	.-890    	; 0x358 <vfprintf+0x28>
 6d2:	f7 01       	movw	r30, r14
 6d4:	26 81       	ldd	r18, Z+6	; 0x06
 6d6:	37 81       	ldd	r19, Z+7	; 0x07
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <vfprintf+0x3ae>
 6da:	2f ef       	ldi	r18, 0xFF	; 255
 6dc:	3f ef       	ldi	r19, 0xFF	; 255
 6de:	c9 01       	movw	r24, r18
 6e0:	2c 96       	adiw	r28, 0x0c	; 12
 6e2:	e2 e1       	ldi	r30, 0x12	; 18
 6e4:	0c 94 30 04 	jmp	0x860	; 0x860 <__epilogue_restores__>

000006e8 <strnlen_P>:
 6e8:	fc 01       	movw	r30, r24
 6ea:	05 90       	lpm	r0, Z+
 6ec:	61 50       	subi	r22, 0x01	; 1
 6ee:	70 40       	sbci	r23, 0x00	; 0
 6f0:	01 10       	cpse	r0, r1
 6f2:	d8 f7       	brcc	.-10     	; 0x6ea <strnlen_P+0x2>
 6f4:	80 95       	com	r24
 6f6:	90 95       	com	r25
 6f8:	8e 0f       	add	r24, r30
 6fa:	9f 1f       	adc	r25, r31
 6fc:	08 95       	ret

000006fe <strnlen>:
 6fe:	fc 01       	movw	r30, r24
 700:	61 50       	subi	r22, 0x01	; 1
 702:	70 40       	sbci	r23, 0x00	; 0
 704:	01 90       	ld	r0, Z+
 706:	01 10       	cpse	r0, r1
 708:	d8 f7       	brcc	.-10     	; 0x700 <strnlen+0x2>
 70a:	80 95       	com	r24
 70c:	90 95       	com	r25
 70e:	8e 0f       	add	r24, r30
 710:	9f 1f       	adc	r25, r31
 712:	08 95       	ret

00000714 <fputc>:
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	8c 01       	movw	r16, r24
 71e:	eb 01       	movw	r28, r22
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	81 fd       	sbrc	r24, 1
 724:	03 c0       	rjmp	.+6      	; 0x72c <fputc+0x18>
 726:	0f ef       	ldi	r16, 0xFF	; 255
 728:	1f ef       	ldi	r17, 0xFF	; 255
 72a:	1a c0       	rjmp	.+52     	; 0x760 <fputc+0x4c>
 72c:	82 ff       	sbrs	r24, 2
 72e:	0d c0       	rjmp	.+26     	; 0x74a <fputc+0x36>
 730:	2e 81       	ldd	r18, Y+6	; 0x06
 732:	3f 81       	ldd	r19, Y+7	; 0x07
 734:	8c 81       	ldd	r24, Y+4	; 0x04
 736:	9d 81       	ldd	r25, Y+5	; 0x05
 738:	28 17       	cp	r18, r24
 73a:	39 07       	cpc	r19, r25
 73c:	64 f4       	brge	.+24     	; 0x756 <fputc+0x42>
 73e:	e8 81       	ld	r30, Y
 740:	f9 81       	ldd	r31, Y+1	; 0x01
 742:	01 93       	st	Z+, r16
 744:	f9 83       	std	Y+1, r31	; 0x01
 746:	e8 83       	st	Y, r30
 748:	06 c0       	rjmp	.+12     	; 0x756 <fputc+0x42>
 74a:	e8 85       	ldd	r30, Y+8	; 0x08
 74c:	f9 85       	ldd	r31, Y+9	; 0x09
 74e:	80 2f       	mov	r24, r16
 750:	09 95       	icall
 752:	89 2b       	or	r24, r25
 754:	41 f7       	brne	.-48     	; 0x726 <fputc+0x12>
 756:	8e 81       	ldd	r24, Y+6	; 0x06
 758:	9f 81       	ldd	r25, Y+7	; 0x07
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	9f 83       	std	Y+7, r25	; 0x07
 75e:	8e 83       	std	Y+6, r24	; 0x06
 760:	c8 01       	movw	r24, r16
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <__ultoa_invert>:
 76c:	fa 01       	movw	r30, r20
 76e:	aa 27       	eor	r26, r26
 770:	28 30       	cpi	r18, 0x08	; 8
 772:	51 f1       	breq	.+84     	; 0x7c8 <__ultoa_invert+0x5c>
 774:	20 31       	cpi	r18, 0x10	; 16
 776:	81 f1       	breq	.+96     	; 0x7d8 <__ultoa_invert+0x6c>
 778:	e8 94       	clt
 77a:	6f 93       	push	r22
 77c:	6e 7f       	andi	r22, 0xFE	; 254
 77e:	6e 5f       	subi	r22, 0xFE	; 254
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	af 4f       	sbci	r26, 0xFF	; 255
 788:	b1 e0       	ldi	r27, 0x01	; 1
 78a:	3e d0       	rcall	.+124    	; 0x808 <__ultoa_invert+0x9c>
 78c:	b4 e0       	ldi	r27, 0x04	; 4
 78e:	3c d0       	rcall	.+120    	; 0x808 <__ultoa_invert+0x9c>
 790:	67 0f       	add	r22, r23
 792:	78 1f       	adc	r23, r24
 794:	89 1f       	adc	r24, r25
 796:	9a 1f       	adc	r25, r26
 798:	a1 1d       	adc	r26, r1
 79a:	68 0f       	add	r22, r24
 79c:	79 1f       	adc	r23, r25
 79e:	8a 1f       	adc	r24, r26
 7a0:	91 1d       	adc	r25, r1
 7a2:	a1 1d       	adc	r26, r1
 7a4:	6a 0f       	add	r22, r26
 7a6:	71 1d       	adc	r23, r1
 7a8:	81 1d       	adc	r24, r1
 7aa:	91 1d       	adc	r25, r1
 7ac:	a1 1d       	adc	r26, r1
 7ae:	20 d0       	rcall	.+64     	; 0x7f0 <__ultoa_invert+0x84>
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <__ultoa_invert+0x48>
 7b2:	68 94       	set
 7b4:	3f 91       	pop	r19
 7b6:	2a e0       	ldi	r18, 0x0A	; 10
 7b8:	26 9f       	mul	r18, r22
 7ba:	11 24       	eor	r1, r1
 7bc:	30 19       	sub	r19, r0
 7be:	30 5d       	subi	r19, 0xD0	; 208
 7c0:	31 93       	st	Z+, r19
 7c2:	de f6       	brtc	.-74     	; 0x77a <__ultoa_invert+0xe>
 7c4:	cf 01       	movw	r24, r30
 7c6:	08 95       	ret
 7c8:	46 2f       	mov	r20, r22
 7ca:	47 70       	andi	r20, 0x07	; 7
 7cc:	40 5d       	subi	r20, 0xD0	; 208
 7ce:	41 93       	st	Z+, r20
 7d0:	b3 e0       	ldi	r27, 0x03	; 3
 7d2:	0f d0       	rcall	.+30     	; 0x7f2 <__ultoa_invert+0x86>
 7d4:	c9 f7       	brne	.-14     	; 0x7c8 <__ultoa_invert+0x5c>
 7d6:	f6 cf       	rjmp	.-20     	; 0x7c4 <__ultoa_invert+0x58>
 7d8:	46 2f       	mov	r20, r22
 7da:	4f 70       	andi	r20, 0x0F	; 15
 7dc:	40 5d       	subi	r20, 0xD0	; 208
 7de:	4a 33       	cpi	r20, 0x3A	; 58
 7e0:	18 f0       	brcs	.+6      	; 0x7e8 <__ultoa_invert+0x7c>
 7e2:	49 5d       	subi	r20, 0xD9	; 217
 7e4:	31 fd       	sbrc	r19, 1
 7e6:	40 52       	subi	r20, 0x20	; 32
 7e8:	41 93       	st	Z+, r20
 7ea:	02 d0       	rcall	.+4      	; 0x7f0 <__ultoa_invert+0x84>
 7ec:	a9 f7       	brne	.-22     	; 0x7d8 <__ultoa_invert+0x6c>
 7ee:	ea cf       	rjmp	.-44     	; 0x7c4 <__ultoa_invert+0x58>
 7f0:	b4 e0       	ldi	r27, 0x04	; 4
 7f2:	a6 95       	lsr	r26
 7f4:	97 95       	ror	r25
 7f6:	87 95       	ror	r24
 7f8:	77 95       	ror	r23
 7fa:	67 95       	ror	r22
 7fc:	ba 95       	dec	r27
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__ultoa_invert+0x86>
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	61 05       	cpc	r22, r1
 804:	71 05       	cpc	r23, r1
 806:	08 95       	ret
 808:	9b 01       	movw	r18, r22
 80a:	ac 01       	movw	r20, r24
 80c:	0a 2e       	mov	r0, r26
 80e:	06 94       	lsr	r0
 810:	57 95       	ror	r21
 812:	47 95       	ror	r20
 814:	37 95       	ror	r19
 816:	27 95       	ror	r18
 818:	ba 95       	dec	r27
 81a:	c9 f7       	brne	.-14     	; 0x80e <__ultoa_invert+0xa2>
 81c:	62 0f       	add	r22, r18
 81e:	73 1f       	adc	r23, r19
 820:	84 1f       	adc	r24, r20
 822:	95 1f       	adc	r25, r21
 824:	a0 1d       	adc	r26, r0
 826:	08 95       	ret

00000828 <__prologue_saves__>:
 828:	2f 92       	push	r2
 82a:	3f 92       	push	r3
 82c:	4f 92       	push	r4
 82e:	5f 92       	push	r5
 830:	6f 92       	push	r6
 832:	7f 92       	push	r7
 834:	8f 92       	push	r8
 836:	9f 92       	push	r9
 838:	af 92       	push	r10
 83a:	bf 92       	push	r11
 83c:	cf 92       	push	r12
 83e:	df 92       	push	r13
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	ca 1b       	sub	r28, r26
 852:	db 0b       	sbc	r29, r27
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	f8 94       	cli
 858:	de bf       	out	0x3e, r29	; 62
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	cd bf       	out	0x3d, r28	; 61
 85e:	09 94       	ijmp

00000860 <__epilogue_restores__>:
 860:	2a 88       	ldd	r2, Y+18	; 0x12
 862:	39 88       	ldd	r3, Y+17	; 0x11
 864:	48 88       	ldd	r4, Y+16	; 0x10
 866:	5f 84       	ldd	r5, Y+15	; 0x0f
 868:	6e 84       	ldd	r6, Y+14	; 0x0e
 86a:	7d 84       	ldd	r7, Y+13	; 0x0d
 86c:	8c 84       	ldd	r8, Y+12	; 0x0c
 86e:	9b 84       	ldd	r9, Y+11	; 0x0b
 870:	aa 84       	ldd	r10, Y+10	; 0x0a
 872:	b9 84       	ldd	r11, Y+9	; 0x09
 874:	c8 84       	ldd	r12, Y+8	; 0x08
 876:	df 80       	ldd	r13, Y+7	; 0x07
 878:	ee 80       	ldd	r14, Y+6	; 0x06
 87a:	fd 80       	ldd	r15, Y+5	; 0x05
 87c:	0c 81       	ldd	r16, Y+4	; 0x04
 87e:	1b 81       	ldd	r17, Y+3	; 0x03
 880:	aa 81       	ldd	r26, Y+2	; 0x02
 882:	b9 81       	ldd	r27, Y+1	; 0x01
 884:	ce 0f       	add	r28, r30
 886:	d1 1d       	adc	r29, r1
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	0f be       	out	0x3f, r0	; 63
 890:	cd bf       	out	0x3d, r28	; 61
 892:	ed 01       	movw	r28, r26
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>

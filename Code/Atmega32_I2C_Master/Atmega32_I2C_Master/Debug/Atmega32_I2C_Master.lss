
Atmega32_I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000902  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000902  00000976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001fe  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012bf  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083f  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bba  00000000  00000000  00003477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00004034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000050e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define Slave_Write_Address		0x20
#define Slave_Read_Address		0x21
#define	count					10

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	
	LCD_Init();								/* Initialize LCD */
  96:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_Init>
	I2C_Init();								/* Initialize I2C */
  9a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Init>
	
	LCD_String_xy(1, 0, "Master Device");
  9e:	40 e6       	ldi	r20, 0x60	; 96
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 92 01 	call	0x324	; 0x324 <LCD_String_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	a1 2c       	mov	r10, r1
  ac:	b1 2c       	mov	r11, r1
		LCD_String_xy(2, 0, "Sending :       ");
		I2C_Start_Wait(Slave_Write_Address);/* Start I2C communication with SLA+W */
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
		{
			sprintf(buffer, "%d    ",i);
  ae:	0f 2e       	mov	r0, r31
  b0:	ff e7       	ldi	r31, 0x7F	; 127
  b2:	cf 2e       	mov	r12, r31
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	df 2e       	mov	r13, r31
  b8:	f0 2d       	mov	r31, r0
  ba:	ee 24       	eor	r14, r14
  bc:	e3 94       	inc	r14
  be:	f1 2c       	mov	r15, r1
  c0:	ec 0e       	add	r14, r28
  c2:	fd 1e       	adc	r15, r29
  c4:	8e 2c       	mov	r8, r14
  c6:	9f 2c       	mov	r9, r15
	LCD_String_xy(1, 0, "Master Device");
	
    while(1)
    {
        //TODO:: Please write your application code 
		LCD_String_xy(2, 0, "Sending :       ");
  c8:	4e e6       	ldi	r20, 0x6E	; 110
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 92 01 	call	0x324	; 0x324 <LCD_String_xy>
		I2C_Start_Wait(Slave_Write_Address);/* Start I2C communication with SLA+W */
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Start_Wait>
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	97 e2       	ldi	r25, 0x27	; 39
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x5c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x62>
  e4:	00 00       	nop
  e6:	85 01       	movw	r16, r10
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
		{
			sprintf(buffer, "%d    ",i);
  e8:	1f 93       	push	r17
  ea:	0f 93       	push	r16
  ec:	df 92       	push	r13
  ee:	cf 92       	push	r12
  f0:	ff 92       	push	r15
  f2:	ef 92       	push	r14
  f4:	0e 94 aa 01 	call	0x354	; 0x354 <sprintf>
			LCD_String_xy(2, 13, buffer);
  f8:	48 2d       	mov	r20, r8
  fa:	59 2d       	mov	r21, r9
  fc:	6d e0       	ldi	r22, 0x0D	; 13
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 92 01 	call	0x324	; 0x324 <LCD_String_xy>
			I2C_Write(i);					/* Send Incrementing count */
 104:	80 2f       	mov	r24, r16
 106:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Write>
 10a:	9f ef       	ldi	r25, 0xFF	; 255
 10c:	24 e3       	ldi	r18, 0x34	; 52
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	91 50       	subi	r25, 0x01	; 1
 112:	20 40       	sbci	r18, 0x00	; 0
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x8e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x98>
 11a:	00 00       	nop
 11c:	0f 5f       	subi	r16, 0xFF	; 255
 11e:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        //TODO:: Please write your application code 
		LCD_String_xy(2, 0, "Sending :       ");
		I2C_Start_Wait(Slave_Write_Address);/* Start I2C communication with SLA+W */
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0a 30       	cpi	r16, 0x0A	; 10
 12e:	11 05       	cpc	r17, r1
 130:	d9 f6       	brne	.-74     	; 0xe8 <main+0x66>
			sprintf(buffer, "%d    ",i);
			LCD_String_xy(2, 13, buffer);
			I2C_Write(i);					/* Send Incrementing count */
			_delay_ms(500);
		}
		LCD_String_xy(2, 0, "Receiving :       ");
 132:	46 e8       	ldi	r20, 0x86	; 134
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 92 01 	call	0x324	; 0x324 <LCD_String_xy>
		I2C_Repeated_Start(Slave_Read_Address);	/* Repeated Start I2C communication with SLA+R */
 13e:	81 e2       	ldi	r24, 0x21	; 33
 140:	0e 94 e5 00 	call	0x1ca	; 0x1ca <I2C_Repeated_Start>
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	97 e2       	ldi	r25, 0x27	; 39
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xc6>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xcc>
 14e:	00 00       	nop
		_delay_ms(5);
		for (uint8_t i = 0; i < count; i++)
 150:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(i < count - 1)
 152:	19 30       	cpi	r17, 0x09	; 9
 154:	88 f4       	brcc	.+34     	; 0x178 <main+0xf6>
			sprintf(buffer, "%d    ", I2C_Read_Ack());/* Read and send Acknowledge of data */
 156:	0e 94 38 01 	call	0x270	; 0x270 <I2C_Read_Ack>
 15a:	1f 92       	push	r1
 15c:	8f 93       	push	r24
 15e:	df 92       	push	r13
 160:	cf 92       	push	r12
 162:	ff 92       	push	r15
 164:	ef 92       	push	r14
 166:	0e 94 aa 01 	call	0x354	; 0x354 <sprintf>
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	10 c0       	rjmp	.+32     	; 0x198 <main+0x116>
			else
			sprintf(buffer, "%d    ", I2C_Read_Nack());/* Read and Not Acknowledge to data */
 178:	0e 94 3f 01 	call	0x27e	; 0x27e <I2C_Read_Nack>
 17c:	1f 92       	push	r1
 17e:	8f 93       	push	r24
 180:	df 92       	push	r13
 182:	cf 92       	push	r12
 184:	ff 92       	push	r15
 186:	ef 92       	push	r14
 188:	0e 94 aa 01 	call	0x354	; 0x354 <sprintf>
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
			LCD_String_xy(2, 13, buffer);
 198:	48 2d       	mov	r20, r8
 19a:	59 2d       	mov	r21, r9
 19c:	6d e0       	ldi	r22, 0x0D	; 13
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 92 01 	call	0x324	; 0x324 <LCD_String_xy>
 1a4:	9f ef       	ldi	r25, 0xFF	; 255
 1a6:	24 e3       	ldi	r18, 0x34	; 52
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x128>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x132>
 1b4:	00 00       	nop
			_delay_ms(500);
		}
		LCD_String_xy(2, 0, "Receiving :       ");
		I2C_Repeated_Start(Slave_Read_Address);	/* Repeated Start I2C communication with SLA+R */
		_delay_ms(5);
		for (uint8_t i = 0; i < count; i++)
 1b6:	1f 5f       	subi	r17, 0xFF	; 255
 1b8:	1a 30       	cpi	r17, 0x0A	; 10
 1ba:	59 f6       	brne	.-106    	; 0x152 <main+0xd0>
			else
			sprintf(buffer, "%d    ", I2C_Read_Nack());/* Read and Not Acknowledge to data */
			LCD_String_xy(2, 13, buffer);
			_delay_ms(500);
		}
		I2C_Stop();							/* Stop I2C */
 1bc:	0e 94 02 01 	call	0x204	; 0x204 <I2C_Stop>
    }
 1c0:	83 cf       	rjmp	.-250    	; 0xc8 <main+0x46>

000001c2 <I2C_Init>:

#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 1c2:	11 b8       	out	0x01, r1	; 1
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	80 b9       	out	0x00, r24	; 0
 1c8:	08 95       	ret

000001ca <I2C_Repeated_Start>:
}

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 1ca:	94 ea       	ldi	r25, 0xA4	; 164
 1cc:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 1ce:	06 b6       	in	r0, 0x36	; 54
 1d0:	07 fe       	sbrs	r0, 7
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1d4:	91 b1       	in	r25, 0x01	; 1
 1d6:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 1d8:	90 31       	cpi	r25, 0x10	; 16
 1da:	71 f4       	brne	.+28     	; 0x1f8 <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
 1dc:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 1de:	84 e8       	ldi	r24, 0x84	; 132
 1e0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 1e2:	06 b6       	in	r0, 0x36	; 54
 1e4:	07 fe       	sbrs	r0, 7
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1e8:	81 b1       	in	r24, 0x01	; 1
 1ea:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 1ec:	80 34       	cpi	r24, 0x40	; 64
 1ee:	31 f0       	breq	.+12     	; 0x1fc <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
 1f0:	80 32       	cpi	r24, 0x20	; 32
 1f2:	31 f4       	brne	.+12     	; 0x200 <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+R failed */
 200:	83 e0       	ldi	r24, 0x03	; 3
}
 202:	08 95       	ret

00000204 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 204:	84 e9       	ldi	r24, 0x94	; 148
 206:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
 208:	06 b6       	in	r0, 0x36	; 54
 20a:	04 fc       	sbrc	r0, 4
 20c:	fd cf       	rjmp	.-6      	; 0x208 <I2C_Stop+0x4>
}
 20e:	08 95       	ret

00000210 <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	18 2f       	mov	r17, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 218:	c4 ea       	ldi	r28, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 21a:	d4 e8       	ldi	r29, 0x84	; 132
void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 21c:	c6 bf       	out	0x36, r28	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
 21e:	06 b6       	in	r0, 0x36	; 54
 220:	07 fe       	sbrs	r0, 7
 222:	fd cf       	rjmp	.-6      	; 0x21e <I2C_Start_Wait+0xe>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 224:	91 b1       	in	r25, 0x01	; 1
 226:	98 7f       	andi	r25, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
 228:	98 30       	cpi	r25, 0x08	; 8
 22a:	c1 f7       	brne	.-16     	; 0x21c <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
 22c:	13 b9       	out	0x03, r17	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 22e:	d6 bf       	out	0x36, r29	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
 230:	06 b6       	in	r0, 0x36	; 54
 232:	07 fe       	sbrs	r0, 7
 234:	fd cf       	rjmp	.-6      	; 0x230 <I2C_Start_Wait+0x20>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 236:	91 b1       	in	r25, 0x01	; 1
 238:	98 7f       	andi	r25, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 23a:	98 31       	cpi	r25, 0x18	; 24
 23c:	19 f0       	breq	.+6      	; 0x244 <I2C_Start_Wait+0x34>
		{
			I2C_Stop();										/* If not then generate stop condition */
 23e:	0e 94 02 01 	call	0x204	; 0x204 <I2C_Stop>
			continue;										/* continue with start loop again */
 242:	ec cf       	rjmp	.-40     	; 0x21c <I2C_Start_Wait+0xc>
		}
		break;												/* If yes then break loop */
	}
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	08 95       	ret

0000024c <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 24c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 24e:	84 e8       	ldi	r24, 0x84	; 132
 250:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 252:	06 b6       	in	r0, 0x36	; 54
 254:	07 fe       	sbrs	r0, 7
 256:	fd cf       	rjmp	.-6      	; 0x252 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 258:	81 b1       	in	r24, 0x01	; 1
 25a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 25c:	88 32       	cpi	r24, 0x28	; 40
 25e:	21 f0       	breq	.+8      	; 0x268 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 260:	80 33       	cpi	r24, 0x30	; 48
 262:	21 f4       	brne	.+8      	; 0x26c <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 26c:	82 e0       	ldi	r24, 0x02	; 2
}
 26e:	08 95       	ret

00000270 <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 270:	84 ec       	ldi	r24, 0xC4	; 196
 272:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 274:	06 b6       	in	r0, 0x36	; 54
 276:	07 fe       	sbrs	r0, 7
 278:	fd cf       	rjmp	.-6      	; 0x274 <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
 27a:	83 b1       	in	r24, 0x03	; 3
}
 27c:	08 95       	ret

0000027e <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 27e:	84 e8       	ldi	r24, 0x84	; 132
 280:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 282:	06 b6       	in	r0, 0x36	; 54
 284:	07 fe       	sbrs	r0, 7
 286:	fd cf       	rjmp	.-6      	; 0x282 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
 288:	83 b1       	in	r24, 0x03	; 3
}
 28a:	08 95       	ret

0000028c <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
 28c:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	87 7e       	andi	r24, 0xE7	; 231
 292:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 294:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_Command+0xc>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 29e:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	8f e6       	ldi	r24, 0x6F	; 111
 2a2:	97 e1       	ldi	r25, 0x17	; 23
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_Command+0x18>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_Command+0x1e>
 2aa:	00 00       	nop
 2ac:	08 95       	ret

000002ae <LCD_Char>:
	_delay_ms(3);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 2ae:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 2b0:	ab 98       	cbi	0x15, 3	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 2b2:	85 b3       	in	r24, 0x15	; 21
 2b4:	84 61       	ori	r24, 0x14	; 20
 2b6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_Char+0xc>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 2c0:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	8f ec       	ldi	r24, 0xCF	; 207
 2c4:	97 e0       	ldi	r25, 0x07	; 7
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_Char+0x18>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_Char+0x1e>
 2cc:	00 00       	nop
 2ce:	08 95       	ret

000002d0 <LCD_Init>:
	_delay_ms(1);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 2d0:	84 b3       	in	r24, 0x14	; 20
 2d2:	8c 61       	ori	r24, 0x1C	; 28
 2d4:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	87 bb       	out	0x17, r24	; 23
 2da:	8f e3       	ldi	r24, 0x3F	; 63
 2dc:	9c e9       	ldi	r25, 0x9C	; 156
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_Init+0xe>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_Init+0x14>
 2e4:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 2e6:	88 e3       	ldi	r24, 0x38	; 56
 2e8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Command>
 304:	08 95       	ret

00000306 <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 30c:	88 81       	ld	r24, Y
 30e:	88 23       	and	r24, r24
 310:	31 f0       	breq	.+12     	; 0x31e <LCD_String+0x18>
	LCD_Command (0x06);								/* Auto Increment cursor */
	LCD_Command (0x01);								/* Clear LCD command */
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
}

void LCD_String (char *str)							/* Send string to LCD function */
 312:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 314:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 318:	89 91       	ld	r24, Y+
 31a:	81 11       	cpse	r24, r1
 31c:	fb cf       	rjmp	.-10     	; 0x314 <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ea 01       	movw	r28, r20
	if (row == 1)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	31 f4       	brne	.+12     	; 0x33a <LCD_String_xy+0x16>
	LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 32e:	86 2f       	mov	r24, r22
 330:	8f 70       	andi	r24, 0x0F	; 15
 332:	80 68       	ori	r24, 0x80	; 128
 334:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Command>
 338:	07 c0       	rjmp	.+14     	; 0x348 <LCD_String_xy+0x24>
	else if (row == 2)
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	29 f4       	brne	.+10     	; 0x348 <LCD_String_xy+0x24>
	LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 33e:	86 2f       	mov	r24, r22
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	80 6c       	ori	r24, 0xC0	; 192
 344:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
 348:	ce 01       	movw	r24, r28
 34a:	0e 94 83 01 	call	0x306	; 0x306 <LCD_String>
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <sprintf>:
 354:	ae e0       	ldi	r26, 0x0E	; 14
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e0 eb       	ldi	r30, 0xB0	; 176
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__prologue_saves__+0x1c>
 360:	0d 89       	ldd	r16, Y+21	; 0x15
 362:	1e 89       	ldd	r17, Y+22	; 0x16
 364:	86 e0       	ldi	r24, 0x06	; 6
 366:	8c 83       	std	Y+4, r24	; 0x04
 368:	1a 83       	std	Y+2, r17	; 0x02
 36a:	09 83       	std	Y+1, r16	; 0x01
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f e7       	ldi	r25, 0x7F	; 127
 370:	9e 83       	std	Y+6, r25	; 0x06
 372:	8d 83       	std	Y+5, r24	; 0x05
 374:	ce 01       	movw	r24, r28
 376:	49 96       	adiw	r24, 0x19	; 25
 378:	ac 01       	movw	r20, r24
 37a:	6f 89       	ldd	r22, Y+23	; 0x17
 37c:	78 8d       	ldd	r23, Y+24	; 0x18
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	0e 94 cc 01 	call	0x398	; 0x398 <vfprintf>
 386:	ef 81       	ldd	r30, Y+7	; 0x07
 388:	f8 85       	ldd	r31, Y+8	; 0x08
 38a:	e0 0f       	add	r30, r16
 38c:	f1 1f       	adc	r31, r17
 38e:	10 82       	st	Z, r1
 390:	2e 96       	adiw	r28, 0x0e	; 14
 392:	e4 e0       	ldi	r30, 0x04	; 4
 394:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__epilogue_restores__+0x1c>

00000398 <vfprintf>:
 398:	ac e0       	ldi	r26, 0x0C	; 12
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e2 ed       	ldi	r30, 0xD2	; 210
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	0c 94 48 04 	jmp	0x890	; 0x890 <__prologue_saves__>
 3a4:	7c 01       	movw	r14, r24
 3a6:	6b 01       	movw	r12, r22
 3a8:	8a 01       	movw	r16, r20
 3aa:	fc 01       	movw	r30, r24
 3ac:	17 82       	std	Z+7, r1	; 0x07
 3ae:	16 82       	std	Z+6, r1	; 0x06
 3b0:	83 81       	ldd	r24, Z+3	; 0x03
 3b2:	81 ff       	sbrs	r24, 1
 3b4:	c6 c1       	rjmp	.+908    	; 0x742 <vfprintf+0x3aa>
 3b6:	88 24       	eor	r8, r8
 3b8:	83 94       	inc	r8
 3ba:	91 2c       	mov	r9, r1
 3bc:	8c 0e       	add	r8, r28
 3be:	9d 1e       	adc	r9, r29
 3c0:	f7 01       	movw	r30, r14
 3c2:	93 81       	ldd	r25, Z+3	; 0x03
 3c4:	f6 01       	movw	r30, r12
 3c6:	93 fd       	sbrc	r25, 3
 3c8:	85 91       	lpm	r24, Z+
 3ca:	93 ff       	sbrs	r25, 3
 3cc:	81 91       	ld	r24, Z+
 3ce:	6f 01       	movw	r12, r30
 3d0:	88 23       	and	r24, r24
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <vfprintf+0x3e>
 3d4:	b2 c1       	rjmp	.+868    	; 0x73a <vfprintf+0x3a2>
 3d6:	85 32       	cpi	r24, 0x25	; 37
 3d8:	39 f4       	brne	.+14     	; 0x3e8 <vfprintf+0x50>
 3da:	93 fd       	sbrc	r25, 3
 3dc:	85 91       	lpm	r24, Z+
 3de:	93 ff       	sbrs	r25, 3
 3e0:	81 91       	ld	r24, Z+
 3e2:	6f 01       	movw	r12, r30
 3e4:	85 32       	cpi	r24, 0x25	; 37
 3e6:	29 f4       	brne	.+10     	; 0x3f2 <vfprintf+0x5a>
 3e8:	b7 01       	movw	r22, r14
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 3f0:	e7 cf       	rjmp	.-50     	; 0x3c0 <vfprintf+0x28>
 3f2:	51 2c       	mov	r5, r1
 3f4:	31 2c       	mov	r3, r1
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	20 32       	cpi	r18, 0x20	; 32
 3fa:	a8 f4       	brcc	.+42     	; 0x426 <vfprintf+0x8e>
 3fc:	8b 32       	cpi	r24, 0x2B	; 43
 3fe:	61 f0       	breq	.+24     	; 0x418 <vfprintf+0x80>
 400:	28 f4       	brcc	.+10     	; 0x40c <vfprintf+0x74>
 402:	80 32       	cpi	r24, 0x20	; 32
 404:	51 f0       	breq	.+20     	; 0x41a <vfprintf+0x82>
 406:	83 32       	cpi	r24, 0x23	; 35
 408:	71 f4       	brne	.+28     	; 0x426 <vfprintf+0x8e>
 40a:	0b c0       	rjmp	.+22     	; 0x422 <vfprintf+0x8a>
 40c:	8d 32       	cpi	r24, 0x2D	; 45
 40e:	39 f0       	breq	.+14     	; 0x41e <vfprintf+0x86>
 410:	80 33       	cpi	r24, 0x30	; 48
 412:	49 f4       	brne	.+18     	; 0x426 <vfprintf+0x8e>
 414:	21 60       	ori	r18, 0x01	; 1
 416:	28 c0       	rjmp	.+80     	; 0x468 <vfprintf+0xd0>
 418:	22 60       	ori	r18, 0x02	; 2
 41a:	24 60       	ori	r18, 0x04	; 4
 41c:	25 c0       	rjmp	.+74     	; 0x468 <vfprintf+0xd0>
 41e:	28 60       	ori	r18, 0x08	; 8
 420:	23 c0       	rjmp	.+70     	; 0x468 <vfprintf+0xd0>
 422:	20 61       	ori	r18, 0x10	; 16
 424:	21 c0       	rjmp	.+66     	; 0x468 <vfprintf+0xd0>
 426:	27 fd       	sbrc	r18, 7
 428:	27 c0       	rjmp	.+78     	; 0x478 <vfprintf+0xe0>
 42a:	38 2f       	mov	r19, r24
 42c:	30 53       	subi	r19, 0x30	; 48
 42e:	3a 30       	cpi	r19, 0x0A	; 10
 430:	78 f4       	brcc	.+30     	; 0x450 <vfprintf+0xb8>
 432:	26 ff       	sbrs	r18, 6
 434:	06 c0       	rjmp	.+12     	; 0x442 <vfprintf+0xaa>
 436:	fa e0       	ldi	r31, 0x0A	; 10
 438:	5f 9e       	mul	r5, r31
 43a:	30 0d       	add	r19, r0
 43c:	11 24       	eor	r1, r1
 43e:	53 2e       	mov	r5, r19
 440:	13 c0       	rjmp	.+38     	; 0x468 <vfprintf+0xd0>
 442:	8a e0       	ldi	r24, 0x0A	; 10
 444:	38 9e       	mul	r3, r24
 446:	30 0d       	add	r19, r0
 448:	11 24       	eor	r1, r1
 44a:	33 2e       	mov	r3, r19
 44c:	20 62       	ori	r18, 0x20	; 32
 44e:	0c c0       	rjmp	.+24     	; 0x468 <vfprintf+0xd0>
 450:	8e 32       	cpi	r24, 0x2E	; 46
 452:	21 f4       	brne	.+8      	; 0x45c <vfprintf+0xc4>
 454:	26 fd       	sbrc	r18, 6
 456:	71 c1       	rjmp	.+738    	; 0x73a <vfprintf+0x3a2>
 458:	20 64       	ori	r18, 0x40	; 64
 45a:	06 c0       	rjmp	.+12     	; 0x468 <vfprintf+0xd0>
 45c:	8c 36       	cpi	r24, 0x6C	; 108
 45e:	11 f4       	brne	.+4      	; 0x464 <vfprintf+0xcc>
 460:	20 68       	ori	r18, 0x80	; 128
 462:	02 c0       	rjmp	.+4      	; 0x468 <vfprintf+0xd0>
 464:	88 36       	cpi	r24, 0x68	; 104
 466:	41 f4       	brne	.+16     	; 0x478 <vfprintf+0xe0>
 468:	f6 01       	movw	r30, r12
 46a:	93 fd       	sbrc	r25, 3
 46c:	85 91       	lpm	r24, Z+
 46e:	93 ff       	sbrs	r25, 3
 470:	81 91       	ld	r24, Z+
 472:	6f 01       	movw	r12, r30
 474:	81 11       	cpse	r24, r1
 476:	c0 cf       	rjmp	.-128    	; 0x3f8 <vfprintf+0x60>
 478:	98 2f       	mov	r25, r24
 47a:	95 54       	subi	r25, 0x45	; 69
 47c:	93 30       	cpi	r25, 0x03	; 3
 47e:	18 f0       	brcs	.+6      	; 0x486 <vfprintf+0xee>
 480:	90 52       	subi	r25, 0x20	; 32
 482:	93 30       	cpi	r25, 0x03	; 3
 484:	28 f4       	brcc	.+10     	; 0x490 <vfprintf+0xf8>
 486:	0c 5f       	subi	r16, 0xFC	; 252
 488:	1f 4f       	sbci	r17, 0xFF	; 255
 48a:	ff e3       	ldi	r31, 0x3F	; 63
 48c:	f9 83       	std	Y+1, r31	; 0x01
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <vfprintf+0x112>
 490:	83 36       	cpi	r24, 0x63	; 99
 492:	31 f0       	breq	.+12     	; 0x4a0 <vfprintf+0x108>
 494:	83 37       	cpi	r24, 0x73	; 115
 496:	71 f0       	breq	.+28     	; 0x4b4 <vfprintf+0x11c>
 498:	83 35       	cpi	r24, 0x53	; 83
 49a:	09 f0       	breq	.+2      	; 0x49e <vfprintf+0x106>
 49c:	5e c0       	rjmp	.+188    	; 0x55a <vfprintf+0x1c2>
 49e:	23 c0       	rjmp	.+70     	; 0x4e6 <vfprintf+0x14e>
 4a0:	f8 01       	movw	r30, r16
 4a2:	80 81       	ld	r24, Z
 4a4:	89 83       	std	Y+1, r24	; 0x01
 4a6:	0e 5f       	subi	r16, 0xFE	; 254
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
 4aa:	44 24       	eor	r4, r4
 4ac:	43 94       	inc	r4
 4ae:	51 2c       	mov	r5, r1
 4b0:	54 01       	movw	r10, r8
 4b2:	15 c0       	rjmp	.+42     	; 0x4de <vfprintf+0x146>
 4b4:	38 01       	movw	r6, r16
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	6f 0e       	add	r6, r31
 4ba:	71 1c       	adc	r7, r1
 4bc:	f8 01       	movw	r30, r16
 4be:	a0 80       	ld	r10, Z
 4c0:	b1 80       	ldd	r11, Z+1	; 0x01
 4c2:	26 ff       	sbrs	r18, 6
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <vfprintf+0x134>
 4c6:	65 2d       	mov	r22, r5
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <vfprintf+0x138>
 4cc:	6f ef       	ldi	r22, 0xFF	; 255
 4ce:	7f ef       	ldi	r23, 0xFF	; 255
 4d0:	c5 01       	movw	r24, r10
 4d2:	2c 87       	std	Y+12, r18	; 0x0c
 4d4:	0e 94 b3 03 	call	0x766	; 0x766 <strnlen>
 4d8:	2c 01       	movw	r4, r24
 4da:	83 01       	movw	r16, r6
 4dc:	2c 85       	ldd	r18, Y+12	; 0x0c
 4de:	6f e7       	ldi	r22, 0x7F	; 127
 4e0:	26 2e       	mov	r2, r22
 4e2:	22 22       	and	r2, r18
 4e4:	18 c0       	rjmp	.+48     	; 0x516 <vfprintf+0x17e>
 4e6:	38 01       	movw	r6, r16
 4e8:	f2 e0       	ldi	r31, 0x02	; 2
 4ea:	6f 0e       	add	r6, r31
 4ec:	71 1c       	adc	r7, r1
 4ee:	f8 01       	movw	r30, r16
 4f0:	a0 80       	ld	r10, Z
 4f2:	b1 80       	ldd	r11, Z+1	; 0x01
 4f4:	26 ff       	sbrs	r18, 6
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <vfprintf+0x166>
 4f8:	65 2d       	mov	r22, r5
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <vfprintf+0x16a>
 4fe:	6f ef       	ldi	r22, 0xFF	; 255
 500:	7f ef       	ldi	r23, 0xFF	; 255
 502:	c5 01       	movw	r24, r10
 504:	2c 87       	std	Y+12, r18	; 0x0c
 506:	0e 94 a8 03 	call	0x750	; 0x750 <strnlen_P>
 50a:	2c 01       	movw	r4, r24
 50c:	2c 85       	ldd	r18, Y+12	; 0x0c
 50e:	50 e8       	ldi	r21, 0x80	; 128
 510:	25 2e       	mov	r2, r21
 512:	22 2a       	or	r2, r18
 514:	83 01       	movw	r16, r6
 516:	23 fc       	sbrc	r2, 3
 518:	1c c0       	rjmp	.+56     	; 0x552 <vfprintf+0x1ba>
 51a:	06 c0       	rjmp	.+12     	; 0x528 <vfprintf+0x190>
 51c:	b7 01       	movw	r22, r14
 51e:	80 e2       	ldi	r24, 0x20	; 32
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 526:	3a 94       	dec	r3
 528:	83 2d       	mov	r24, r3
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	48 16       	cp	r4, r24
 52e:	59 06       	cpc	r5, r25
 530:	a8 f3       	brcs	.-22     	; 0x51c <vfprintf+0x184>
 532:	0f c0       	rjmp	.+30     	; 0x552 <vfprintf+0x1ba>
 534:	f5 01       	movw	r30, r10
 536:	27 fc       	sbrc	r2, 7
 538:	85 91       	lpm	r24, Z+
 53a:	27 fe       	sbrs	r2, 7
 53c:	81 91       	ld	r24, Z+
 53e:	5f 01       	movw	r10, r30
 540:	b7 01       	movw	r22, r14
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 548:	31 10       	cpse	r3, r1
 54a:	3a 94       	dec	r3
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	4f 1a       	sub	r4, r31
 550:	51 08       	sbc	r5, r1
 552:	41 14       	cp	r4, r1
 554:	51 04       	cpc	r5, r1
 556:	71 f7       	brne	.-36     	; 0x534 <vfprintf+0x19c>
 558:	ed c0       	rjmp	.+474    	; 0x734 <vfprintf+0x39c>
 55a:	84 36       	cpi	r24, 0x64	; 100
 55c:	11 f0       	breq	.+4      	; 0x562 <vfprintf+0x1ca>
 55e:	89 36       	cpi	r24, 0x69	; 105
 560:	41 f5       	brne	.+80     	; 0x5b2 <vfprintf+0x21a>
 562:	f8 01       	movw	r30, r16
 564:	27 ff       	sbrs	r18, 7
 566:	07 c0       	rjmp	.+14     	; 0x576 <vfprintf+0x1de>
 568:	60 81       	ld	r22, Z
 56a:	71 81       	ldd	r23, Z+1	; 0x01
 56c:	82 81       	ldd	r24, Z+2	; 0x02
 56e:	93 81       	ldd	r25, Z+3	; 0x03
 570:	0c 5f       	subi	r16, 0xFC	; 252
 572:	1f 4f       	sbci	r17, 0xFF	; 255
 574:	08 c0       	rjmp	.+16     	; 0x586 <vfprintf+0x1ee>
 576:	60 81       	ld	r22, Z
 578:	71 81       	ldd	r23, Z+1	; 0x01
 57a:	88 27       	eor	r24, r24
 57c:	77 fd       	sbrc	r23, 7
 57e:	80 95       	com	r24
 580:	98 2f       	mov	r25, r24
 582:	0e 5f       	subi	r16, 0xFE	; 254
 584:	1f 4f       	sbci	r17, 0xFF	; 255
 586:	4f e6       	ldi	r20, 0x6F	; 111
 588:	b4 2e       	mov	r11, r20
 58a:	b2 22       	and	r11, r18
 58c:	97 ff       	sbrs	r25, 7
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <vfprintf+0x20a>
 590:	90 95       	com	r25
 592:	80 95       	com	r24
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	f0 e8       	ldi	r31, 0x80	; 128
 5a0:	bf 2a       	or	r11, r31
 5a2:	2a e0       	ldi	r18, 0x0A	; 10
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	a4 01       	movw	r20, r8
 5a8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__ultoa_invert>
 5ac:	a8 2e       	mov	r10, r24
 5ae:	a8 18       	sub	r10, r8
 5b0:	43 c0       	rjmp	.+134    	; 0x638 <vfprintf+0x2a0>
 5b2:	85 37       	cpi	r24, 0x75	; 117
 5b4:	31 f4       	brne	.+12     	; 0x5c2 <vfprintf+0x22a>
 5b6:	3f ee       	ldi	r19, 0xEF	; 239
 5b8:	b3 2e       	mov	r11, r19
 5ba:	b2 22       	and	r11, r18
 5bc:	2a e0       	ldi	r18, 0x0A	; 10
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	24 c0       	rjmp	.+72     	; 0x60a <vfprintf+0x272>
 5c2:	99 ef       	ldi	r25, 0xF9	; 249
 5c4:	b9 2e       	mov	r11, r25
 5c6:	b2 22       	and	r11, r18
 5c8:	8f 36       	cpi	r24, 0x6F	; 111
 5ca:	b9 f0       	breq	.+46     	; 0x5fa <vfprintf+0x262>
 5cc:	20 f4       	brcc	.+8      	; 0x5d6 <vfprintf+0x23e>
 5ce:	88 35       	cpi	r24, 0x58	; 88
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <vfprintf+0x23c>
 5d2:	b3 c0       	rjmp	.+358    	; 0x73a <vfprintf+0x3a2>
 5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <vfprintf+0x258>
 5d6:	80 37       	cpi	r24, 0x70	; 112
 5d8:	21 f0       	breq	.+8      	; 0x5e2 <vfprintf+0x24a>
 5da:	88 37       	cpi	r24, 0x78	; 120
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <vfprintf+0x248>
 5de:	ad c0       	rjmp	.+346    	; 0x73a <vfprintf+0x3a2>
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <vfprintf+0x24e>
 5e2:	20 e1       	ldi	r18, 0x10	; 16
 5e4:	b2 2a       	or	r11, r18
 5e6:	b4 fe       	sbrs	r11, 4
 5e8:	0b c0       	rjmp	.+22     	; 0x600 <vfprintf+0x268>
 5ea:	84 e0       	ldi	r24, 0x04	; 4
 5ec:	b8 2a       	or	r11, r24
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <vfprintf+0x268>
 5f0:	24 ff       	sbrs	r18, 4
 5f2:	09 c0       	rjmp	.+18     	; 0x606 <vfprintf+0x26e>
 5f4:	e6 e0       	ldi	r30, 0x06	; 6
 5f6:	be 2a       	or	r11, r30
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <vfprintf+0x26e>
 5fa:	28 e0       	ldi	r18, 0x08	; 8
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <vfprintf+0x272>
 600:	20 e1       	ldi	r18, 0x10	; 16
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <vfprintf+0x272>
 606:	20 e1       	ldi	r18, 0x10	; 16
 608:	32 e0       	ldi	r19, 0x02	; 2
 60a:	f8 01       	movw	r30, r16
 60c:	b7 fe       	sbrs	r11, 7
 60e:	07 c0       	rjmp	.+14     	; 0x61e <vfprintf+0x286>
 610:	60 81       	ld	r22, Z
 612:	71 81       	ldd	r23, Z+1	; 0x01
 614:	82 81       	ldd	r24, Z+2	; 0x02
 616:	93 81       	ldd	r25, Z+3	; 0x03
 618:	0c 5f       	subi	r16, 0xFC	; 252
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	06 c0       	rjmp	.+12     	; 0x62a <vfprintf+0x292>
 61e:	60 81       	ld	r22, Z
 620:	71 81       	ldd	r23, Z+1	; 0x01
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 5f       	subi	r16, 0xFE	; 254
 628:	1f 4f       	sbci	r17, 0xFF	; 255
 62a:	a4 01       	movw	r20, r8
 62c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__ultoa_invert>
 630:	a8 2e       	mov	r10, r24
 632:	a8 18       	sub	r10, r8
 634:	ff e7       	ldi	r31, 0x7F	; 127
 636:	bf 22       	and	r11, r31
 638:	b6 fe       	sbrs	r11, 6
 63a:	0b c0       	rjmp	.+22     	; 0x652 <vfprintf+0x2ba>
 63c:	2b 2d       	mov	r18, r11
 63e:	2e 7f       	andi	r18, 0xFE	; 254
 640:	a5 14       	cp	r10, r5
 642:	50 f4       	brcc	.+20     	; 0x658 <vfprintf+0x2c0>
 644:	b4 fe       	sbrs	r11, 4
 646:	0a c0       	rjmp	.+20     	; 0x65c <vfprintf+0x2c4>
 648:	b2 fc       	sbrc	r11, 2
 64a:	08 c0       	rjmp	.+16     	; 0x65c <vfprintf+0x2c4>
 64c:	2b 2d       	mov	r18, r11
 64e:	2e 7e       	andi	r18, 0xEE	; 238
 650:	05 c0       	rjmp	.+10     	; 0x65c <vfprintf+0x2c4>
 652:	7a 2c       	mov	r7, r10
 654:	2b 2d       	mov	r18, r11
 656:	03 c0       	rjmp	.+6      	; 0x65e <vfprintf+0x2c6>
 658:	7a 2c       	mov	r7, r10
 65a:	01 c0       	rjmp	.+2      	; 0x65e <vfprintf+0x2c6>
 65c:	75 2c       	mov	r7, r5
 65e:	24 ff       	sbrs	r18, 4
 660:	0d c0       	rjmp	.+26     	; 0x67c <vfprintf+0x2e4>
 662:	fe 01       	movw	r30, r28
 664:	ea 0d       	add	r30, r10
 666:	f1 1d       	adc	r31, r1
 668:	80 81       	ld	r24, Z
 66a:	80 33       	cpi	r24, 0x30	; 48
 66c:	11 f4       	brne	.+4      	; 0x672 <vfprintf+0x2da>
 66e:	29 7e       	andi	r18, 0xE9	; 233
 670:	09 c0       	rjmp	.+18     	; 0x684 <vfprintf+0x2ec>
 672:	22 ff       	sbrs	r18, 2
 674:	06 c0       	rjmp	.+12     	; 0x682 <vfprintf+0x2ea>
 676:	73 94       	inc	r7
 678:	73 94       	inc	r7
 67a:	04 c0       	rjmp	.+8      	; 0x684 <vfprintf+0x2ec>
 67c:	82 2f       	mov	r24, r18
 67e:	86 78       	andi	r24, 0x86	; 134
 680:	09 f0       	breq	.+2      	; 0x684 <vfprintf+0x2ec>
 682:	73 94       	inc	r7
 684:	23 fd       	sbrc	r18, 3
 686:	14 c0       	rjmp	.+40     	; 0x6b0 <vfprintf+0x318>
 688:	20 ff       	sbrs	r18, 0
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <vfprintf+0x312>
 68c:	5a 2c       	mov	r5, r10
 68e:	73 14       	cp	r7, r3
 690:	60 f4       	brcc	.+24     	; 0x6aa <vfprintf+0x312>
 692:	53 0c       	add	r5, r3
 694:	57 18       	sub	r5, r7
 696:	73 2c       	mov	r7, r3
 698:	08 c0       	rjmp	.+16     	; 0x6aa <vfprintf+0x312>
 69a:	b7 01       	movw	r22, r14
 69c:	80 e2       	ldi	r24, 0x20	; 32
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	2c 87       	std	Y+12, r18	; 0x0c
 6a2:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 6a6:	73 94       	inc	r7
 6a8:	2c 85       	ldd	r18, Y+12	; 0x0c
 6aa:	73 14       	cp	r7, r3
 6ac:	b0 f3       	brcs	.-20     	; 0x69a <vfprintf+0x302>
 6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <vfprintf+0x320>
 6b0:	73 14       	cp	r7, r3
 6b2:	10 f4       	brcc	.+4      	; 0x6b8 <vfprintf+0x320>
 6b4:	37 18       	sub	r3, r7
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <vfprintf+0x322>
 6b8:	31 2c       	mov	r3, r1
 6ba:	24 ff       	sbrs	r18, 4
 6bc:	12 c0       	rjmp	.+36     	; 0x6e2 <vfprintf+0x34a>
 6be:	b7 01       	movw	r22, r14
 6c0:	80 e3       	ldi	r24, 0x30	; 48
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	2c 87       	std	Y+12, r18	; 0x0c
 6c6:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 6ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 6cc:	22 ff       	sbrs	r18, 2
 6ce:	1e c0       	rjmp	.+60     	; 0x70c <vfprintf+0x374>
 6d0:	21 ff       	sbrs	r18, 1
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <vfprintf+0x342>
 6d4:	88 e5       	ldi	r24, 0x58	; 88
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <vfprintf+0x346>
 6da:	88 e7       	ldi	r24, 0x78	; 120
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	b7 01       	movw	r22, r14
 6e0:	0c c0       	rjmp	.+24     	; 0x6fa <vfprintf+0x362>
 6e2:	82 2f       	mov	r24, r18
 6e4:	86 78       	andi	r24, 0x86	; 134
 6e6:	91 f0       	breq	.+36     	; 0x70c <vfprintf+0x374>
 6e8:	21 fd       	sbrc	r18, 1
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <vfprintf+0x358>
 6ec:	80 e2       	ldi	r24, 0x20	; 32
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <vfprintf+0x35a>
 6f0:	8b e2       	ldi	r24, 0x2B	; 43
 6f2:	27 fd       	sbrc	r18, 7
 6f4:	8d e2       	ldi	r24, 0x2D	; 45
 6f6:	b7 01       	movw	r22, r14
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <vfprintf+0x374>
 700:	b7 01       	movw	r22, r14
 702:	80 e3       	ldi	r24, 0x30	; 48
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 70a:	5a 94       	dec	r5
 70c:	a5 14       	cp	r10, r5
 70e:	c0 f3       	brcs	.-16     	; 0x700 <vfprintf+0x368>
 710:	aa 94       	dec	r10
 712:	f4 01       	movw	r30, r8
 714:	ea 0d       	add	r30, r10
 716:	f1 1d       	adc	r31, r1
 718:	b7 01       	movw	r22, r14
 71a:	80 81       	ld	r24, Z
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 722:	a1 10       	cpse	r10, r1
 724:	f5 cf       	rjmp	.-22     	; 0x710 <vfprintf+0x378>
 726:	06 c0       	rjmp	.+12     	; 0x734 <vfprintf+0x39c>
 728:	b7 01       	movw	r22, r14
 72a:	80 e2       	ldi	r24, 0x20	; 32
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 732:	3a 94       	dec	r3
 734:	31 10       	cpse	r3, r1
 736:	f8 cf       	rjmp	.-16     	; 0x728 <vfprintf+0x390>
 738:	43 ce       	rjmp	.-890    	; 0x3c0 <vfprintf+0x28>
 73a:	f7 01       	movw	r30, r14
 73c:	26 81       	ldd	r18, Z+6	; 0x06
 73e:	37 81       	ldd	r19, Z+7	; 0x07
 740:	02 c0       	rjmp	.+4      	; 0x746 <vfprintf+0x3ae>
 742:	2f ef       	ldi	r18, 0xFF	; 255
 744:	3f ef       	ldi	r19, 0xFF	; 255
 746:	c9 01       	movw	r24, r18
 748:	2c 96       	adiw	r28, 0x0c	; 12
 74a:	e2 e1       	ldi	r30, 0x12	; 18
 74c:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__epilogue_restores__>

00000750 <strnlen_P>:
 750:	fc 01       	movw	r30, r24
 752:	05 90       	lpm	r0, Z+
 754:	61 50       	subi	r22, 0x01	; 1
 756:	70 40       	sbci	r23, 0x00	; 0
 758:	01 10       	cpse	r0, r1
 75a:	d8 f7       	brcc	.-10     	; 0x752 <strnlen_P+0x2>
 75c:	80 95       	com	r24
 75e:	90 95       	com	r25
 760:	8e 0f       	add	r24, r30
 762:	9f 1f       	adc	r25, r31
 764:	08 95       	ret

00000766 <strnlen>:
 766:	fc 01       	movw	r30, r24
 768:	61 50       	subi	r22, 0x01	; 1
 76a:	70 40       	sbci	r23, 0x00	; 0
 76c:	01 90       	ld	r0, Z+
 76e:	01 10       	cpse	r0, r1
 770:	d8 f7       	brcc	.-10     	; 0x768 <strnlen+0x2>
 772:	80 95       	com	r24
 774:	90 95       	com	r25
 776:	8e 0f       	add	r24, r30
 778:	9f 1f       	adc	r25, r31
 77a:	08 95       	ret

0000077c <fputc>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	8c 01       	movw	r16, r24
 786:	eb 01       	movw	r28, r22
 788:	8b 81       	ldd	r24, Y+3	; 0x03
 78a:	81 fd       	sbrc	r24, 1
 78c:	03 c0       	rjmp	.+6      	; 0x794 <fputc+0x18>
 78e:	0f ef       	ldi	r16, 0xFF	; 255
 790:	1f ef       	ldi	r17, 0xFF	; 255
 792:	1a c0       	rjmp	.+52     	; 0x7c8 <fputc+0x4c>
 794:	82 ff       	sbrs	r24, 2
 796:	0d c0       	rjmp	.+26     	; 0x7b2 <fputc+0x36>
 798:	2e 81       	ldd	r18, Y+6	; 0x06
 79a:	3f 81       	ldd	r19, Y+7	; 0x07
 79c:	8c 81       	ldd	r24, Y+4	; 0x04
 79e:	9d 81       	ldd	r25, Y+5	; 0x05
 7a0:	28 17       	cp	r18, r24
 7a2:	39 07       	cpc	r19, r25
 7a4:	64 f4       	brge	.+24     	; 0x7be <fputc+0x42>
 7a6:	e8 81       	ld	r30, Y
 7a8:	f9 81       	ldd	r31, Y+1	; 0x01
 7aa:	01 93       	st	Z+, r16
 7ac:	f9 83       	std	Y+1, r31	; 0x01
 7ae:	e8 83       	st	Y, r30
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <fputc+0x42>
 7b2:	e8 85       	ldd	r30, Y+8	; 0x08
 7b4:	f9 85       	ldd	r31, Y+9	; 0x09
 7b6:	80 2f       	mov	r24, r16
 7b8:	09 95       	icall
 7ba:	89 2b       	or	r24, r25
 7bc:	41 f7       	brne	.-48     	; 0x78e <fputc+0x12>
 7be:	8e 81       	ldd	r24, Y+6	; 0x06
 7c0:	9f 81       	ldd	r25, Y+7	; 0x07
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	9f 83       	std	Y+7, r25	; 0x07
 7c6:	8e 83       	std	Y+6, r24	; 0x06
 7c8:	c8 01       	movw	r24, r16
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	08 95       	ret

000007d4 <__ultoa_invert>:
 7d4:	fa 01       	movw	r30, r20
 7d6:	aa 27       	eor	r26, r26
 7d8:	28 30       	cpi	r18, 0x08	; 8
 7da:	51 f1       	breq	.+84     	; 0x830 <__ultoa_invert+0x5c>
 7dc:	20 31       	cpi	r18, 0x10	; 16
 7de:	81 f1       	breq	.+96     	; 0x840 <__ultoa_invert+0x6c>
 7e0:	e8 94       	clt
 7e2:	6f 93       	push	r22
 7e4:	6e 7f       	andi	r22, 0xFE	; 254
 7e6:	6e 5f       	subi	r22, 0xFE	; 254
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	af 4f       	sbci	r26, 0xFF	; 255
 7f0:	b1 e0       	ldi	r27, 0x01	; 1
 7f2:	3e d0       	rcall	.+124    	; 0x870 <__stack+0x11>
 7f4:	b4 e0       	ldi	r27, 0x04	; 4
 7f6:	3c d0       	rcall	.+120    	; 0x870 <__stack+0x11>
 7f8:	67 0f       	add	r22, r23
 7fa:	78 1f       	adc	r23, r24
 7fc:	89 1f       	adc	r24, r25
 7fe:	9a 1f       	adc	r25, r26
 800:	a1 1d       	adc	r26, r1
 802:	68 0f       	add	r22, r24
 804:	79 1f       	adc	r23, r25
 806:	8a 1f       	adc	r24, r26
 808:	91 1d       	adc	r25, r1
 80a:	a1 1d       	adc	r26, r1
 80c:	6a 0f       	add	r22, r26
 80e:	71 1d       	adc	r23, r1
 810:	81 1d       	adc	r24, r1
 812:	91 1d       	adc	r25, r1
 814:	a1 1d       	adc	r26, r1
 816:	20 d0       	rcall	.+64     	; 0x858 <__ultoa_invert+0x84>
 818:	09 f4       	brne	.+2      	; 0x81c <__ultoa_invert+0x48>
 81a:	68 94       	set
 81c:	3f 91       	pop	r19
 81e:	2a e0       	ldi	r18, 0x0A	; 10
 820:	26 9f       	mul	r18, r22
 822:	11 24       	eor	r1, r1
 824:	30 19       	sub	r19, r0
 826:	30 5d       	subi	r19, 0xD0	; 208
 828:	31 93       	st	Z+, r19
 82a:	de f6       	brtc	.-74     	; 0x7e2 <__ultoa_invert+0xe>
 82c:	cf 01       	movw	r24, r30
 82e:	08 95       	ret
 830:	46 2f       	mov	r20, r22
 832:	47 70       	andi	r20, 0x07	; 7
 834:	40 5d       	subi	r20, 0xD0	; 208
 836:	41 93       	st	Z+, r20
 838:	b3 e0       	ldi	r27, 0x03	; 3
 83a:	0f d0       	rcall	.+30     	; 0x85a <__ultoa_invert+0x86>
 83c:	c9 f7       	brne	.-14     	; 0x830 <__ultoa_invert+0x5c>
 83e:	f6 cf       	rjmp	.-20     	; 0x82c <__ultoa_invert+0x58>
 840:	46 2f       	mov	r20, r22
 842:	4f 70       	andi	r20, 0x0F	; 15
 844:	40 5d       	subi	r20, 0xD0	; 208
 846:	4a 33       	cpi	r20, 0x3A	; 58
 848:	18 f0       	brcs	.+6      	; 0x850 <__ultoa_invert+0x7c>
 84a:	49 5d       	subi	r20, 0xD9	; 217
 84c:	31 fd       	sbrc	r19, 1
 84e:	40 52       	subi	r20, 0x20	; 32
 850:	41 93       	st	Z+, r20
 852:	02 d0       	rcall	.+4      	; 0x858 <__ultoa_invert+0x84>
 854:	a9 f7       	brne	.-22     	; 0x840 <__ultoa_invert+0x6c>
 856:	ea cf       	rjmp	.-44     	; 0x82c <__ultoa_invert+0x58>
 858:	b4 e0       	ldi	r27, 0x04	; 4
 85a:	a6 95       	lsr	r26
 85c:	97 95       	ror	r25
 85e:	87 95       	ror	r24
 860:	77 95       	ror	r23
 862:	67 95       	ror	r22
 864:	ba 95       	dec	r27
 866:	c9 f7       	brne	.-14     	; 0x85a <__ultoa_invert+0x86>
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	61 05       	cpc	r22, r1
 86c:	71 05       	cpc	r23, r1
 86e:	08 95       	ret
 870:	9b 01       	movw	r18, r22
 872:	ac 01       	movw	r20, r24
 874:	0a 2e       	mov	r0, r26
 876:	06 94       	lsr	r0
 878:	57 95       	ror	r21
 87a:	47 95       	ror	r20
 87c:	37 95       	ror	r19
 87e:	27 95       	ror	r18
 880:	ba 95       	dec	r27
 882:	c9 f7       	brne	.-14     	; 0x876 <__stack+0x17>
 884:	62 0f       	add	r22, r18
 886:	73 1f       	adc	r23, r19
 888:	84 1f       	adc	r24, r20
 88a:	95 1f       	adc	r25, r21
 88c:	a0 1d       	adc	r26, r0
 88e:	08 95       	ret

00000890 <__prologue_saves__>:
 890:	2f 92       	push	r2
 892:	3f 92       	push	r3
 894:	4f 92       	push	r4
 896:	5f 92       	push	r5
 898:	6f 92       	push	r6
 89a:	7f 92       	push	r7
 89c:	8f 92       	push	r8
 89e:	9f 92       	push	r9
 8a0:	af 92       	push	r10
 8a2:	bf 92       	push	r11
 8a4:	cf 92       	push	r12
 8a6:	df 92       	push	r13
 8a8:	ef 92       	push	r14
 8aa:	ff 92       	push	r15
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	cd b7       	in	r28, 0x3d	; 61
 8b6:	de b7       	in	r29, 0x3e	; 62
 8b8:	ca 1b       	sub	r28, r26
 8ba:	db 0b       	sbc	r29, r27
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	f8 94       	cli
 8c0:	de bf       	out	0x3e, r29	; 62
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	cd bf       	out	0x3d, r28	; 61
 8c6:	09 94       	ijmp

000008c8 <__epilogue_restores__>:
 8c8:	2a 88       	ldd	r2, Y+18	; 0x12
 8ca:	39 88       	ldd	r3, Y+17	; 0x11
 8cc:	48 88       	ldd	r4, Y+16	; 0x10
 8ce:	5f 84       	ldd	r5, Y+15	; 0x0f
 8d0:	6e 84       	ldd	r6, Y+14	; 0x0e
 8d2:	7d 84       	ldd	r7, Y+13	; 0x0d
 8d4:	8c 84       	ldd	r8, Y+12	; 0x0c
 8d6:	9b 84       	ldd	r9, Y+11	; 0x0b
 8d8:	aa 84       	ldd	r10, Y+10	; 0x0a
 8da:	b9 84       	ldd	r11, Y+9	; 0x09
 8dc:	c8 84       	ldd	r12, Y+8	; 0x08
 8de:	df 80       	ldd	r13, Y+7	; 0x07
 8e0:	ee 80       	ldd	r14, Y+6	; 0x06
 8e2:	fd 80       	ldd	r15, Y+5	; 0x05
 8e4:	0c 81       	ldd	r16, Y+4	; 0x04
 8e6:	1b 81       	ldd	r17, Y+3	; 0x03
 8e8:	aa 81       	ldd	r26, Y+2	; 0x02
 8ea:	b9 81       	ldd	r27, Y+1	; 0x01
 8ec:	ce 0f       	add	r28, r30
 8ee:	d1 1d       	adc	r29, r1
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	f8 94       	cli
 8f4:	de bf       	out	0x3e, r29	; 62
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	ed 01       	movw	r28, r26
 8fc:	08 95       	ret

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
